/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Clock Represents the current market time and open/close events.
type Clock struct {
	Timestamp string `json:"timestamp"`
	IsOpen bool `json:"is_open"`
	NextOpen time.Time `json:"next_open"`
	NextClose time.Time `json:"next_close"`
}

// NewClock instantiates a new Clock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClock(timestamp string, isOpen bool, nextOpen time.Time, nextClose time.Time) *Clock {
	this := Clock{}
	this.Timestamp = timestamp
	this.IsOpen = isOpen
	this.NextOpen = nextOpen
	this.NextClose = nextClose
	return &this
}

// NewClockWithDefaults instantiates a new Clock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClockWithDefaults() *Clock {
	this := Clock{}
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *Clock) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Clock) GetTimestampOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Clock) SetTimestamp(v string) {
	o.Timestamp = v
}

// GetIsOpen returns the IsOpen field value
func (o *Clock) GetIsOpen() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsOpen
}

// GetIsOpenOk returns a tuple with the IsOpen field value
// and a boolean to check if the value has been set.
func (o *Clock) GetIsOpenOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsOpen, true
}

// SetIsOpen sets field value
func (o *Clock) SetIsOpen(v bool) {
	o.IsOpen = v
}

// GetNextOpen returns the NextOpen field value
func (o *Clock) GetNextOpen() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.NextOpen
}

// GetNextOpenOk returns a tuple with the NextOpen field value
// and a boolean to check if the value has been set.
func (o *Clock) GetNextOpenOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NextOpen, true
}

// SetNextOpen sets field value
func (o *Clock) SetNextOpen(v time.Time) {
	o.NextOpen = v
}

// GetNextClose returns the NextClose field value
func (o *Clock) GetNextClose() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.NextClose
}

// GetNextCloseOk returns a tuple with the NextClose field value
// and a boolean to check if the value has been set.
func (o *Clock) GetNextCloseOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NextClose, true
}

// SetNextClose sets field value
func (o *Clock) SetNextClose(v time.Time) {
	o.NextClose = v
}

func (o Clock) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["is_open"] = o.IsOpen
	}
	if true {
		toSerialize["next_open"] = o.NextOpen
	}
	if true {
		toSerialize["next_close"] = o.NextClose
	}
	return json.Marshal(toSerialize)
}

type NullableClock struct {
	value *Clock
	isSet bool
}

func (v NullableClock) Get() *Clock {
	return v.value
}

func (v *NullableClock) Set(val *Clock) {
	v.value = val
	v.isSet = true
}

func (v NullableClock) IsSet() bool {
	return v.isSet
}

func (v *NullableClock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClock(val *Clock) *NullableClock {
	return &NullableClock{value: val, isSet: true}
}

func (v NullableClock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


