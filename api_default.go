/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiApiDeleteAccountsAccountIdWatchlistsWatchlistIdRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	accountId string
	watchlistId string
}


func (r DefaultApiApiDeleteAccountsAccountIdWatchlistsWatchlistIdRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteAccountsAccountIdWatchlistsWatchlistIdExecute(r)
}

/*
DeleteAccountsAccountIdWatchlistsWatchlistId Remove a watchlist

Irrevocably delete a watchlist.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId Unique identifier of an account
 @param watchlistId Unique identifier of a watchlist
 @return DefaultApiApiDeleteAccountsAccountIdWatchlistsWatchlistIdRequest
*/
func (a *DefaultApiService) DeleteAccountsAccountIdWatchlistsWatchlistId(ctx _context.Context, accountId string, watchlistId string) DefaultApiApiDeleteAccountsAccountIdWatchlistsWatchlistIdRequest {
	return DefaultApiApiDeleteAccountsAccountIdWatchlistsWatchlistIdRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		watchlistId: watchlistId,
	}
}

// Execute executes the request
func (a *DefaultApiService) DeleteAccountsAccountIdWatchlistsWatchlistIdExecute(r DefaultApiApiDeleteAccountsAccountIdWatchlistsWatchlistIdRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteAccountsAccountIdWatchlistsWatchlistId")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accounts/{account_id}/watchlists/{watchlist_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_id"+"}", _neturl.PathEscape(parameterToString(r.accountId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"watchlist_id"+"}", _neturl.PathEscape(parameterToString(r.watchlistId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultApiApiGetAccountsAccountIdWatchlistsWatchlistIdRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	accountId string
	watchlistId string
}


func (r DefaultApiApiGetAccountsAccountIdWatchlistsWatchlistIdRequest) Execute() (Watchlist, *_nethttp.Response, error) {
	return r.ApiService.GetAccountsAccountIdWatchlistsWatchlistIdExecute(r)
}

/*
GetAccountsAccountIdWatchlistsWatchlistId Manage watchlists

Fetch a single watchlist by identifier.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId Unique identifier of an account
 @param watchlistId Unique identifier of a watchlist
 @return DefaultApiApiGetAccountsAccountIdWatchlistsWatchlistIdRequest
*/
func (a *DefaultApiService) GetAccountsAccountIdWatchlistsWatchlistId(ctx _context.Context, accountId string, watchlistId string) DefaultApiApiGetAccountsAccountIdWatchlistsWatchlistIdRequest {
	return DefaultApiApiGetAccountsAccountIdWatchlistsWatchlistIdRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		watchlistId: watchlistId,
	}
}

// Execute executes the request
//  @return Watchlist
func (a *DefaultApiService) GetAccountsAccountIdWatchlistsWatchlistIdExecute(r DefaultApiApiGetAccountsAccountIdWatchlistsWatchlistIdRequest) (Watchlist, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Watchlist
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetAccountsAccountIdWatchlistsWatchlistId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accounts/{account_id}/watchlists/{watchlist_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_id"+"}", _neturl.PathEscape(parameterToString(r.accountId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"watchlist_id"+"}", _neturl.PathEscape(parameterToString(r.watchlistId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiGetTradingAccountsAccountIdWatchlistsRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	accountId string
}


func (r DefaultApiApiGetTradingAccountsAccountIdWatchlistsRequest) Execute() ([]Watchlist, *_nethttp.Response, error) {
	return r.ApiService.GetTradingAccountsAccountIdWatchlistsExecute(r)
}

/*
GetTradingAccountsAccountIdWatchlists Retrieve all watchlists

Fetch a list of all watchlists currently in an account.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId Unique identifier of an account.
 @return DefaultApiApiGetTradingAccountsAccountIdWatchlistsRequest
*/
func (a *DefaultApiService) GetTradingAccountsAccountIdWatchlists(ctx _context.Context, accountId string) DefaultApiApiGetTradingAccountsAccountIdWatchlistsRequest {
	return DefaultApiApiGetTradingAccountsAccountIdWatchlistsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return []Watchlist
func (a *DefaultApiService) GetTradingAccountsAccountIdWatchlistsExecute(r DefaultApiApiGetTradingAccountsAccountIdWatchlistsRequest) ([]Watchlist, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Watchlist
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetTradingAccountsAccountIdWatchlists")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trading/accounts/{account_id}/watchlists"
	localVarPath = strings.Replace(localVarPath, "{"+"account_id"+"}", _neturl.PathEscape(parameterToString(r.accountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiPostTradingAccountsAccountIdWatchlistsRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	accountId string
	watchlist *Watchlist
}

func (r DefaultApiApiPostTradingAccountsAccountIdWatchlistsRequest) Watchlist(watchlist Watchlist) DefaultApiApiPostTradingAccountsAccountIdWatchlistsRequest {
	r.watchlist = &watchlist
	return r
}

func (r DefaultApiApiPostTradingAccountsAccountIdWatchlistsRequest) Execute() (Watchlist, *_nethttp.Response, error) {
	return r.ApiService.PostTradingAccountsAccountIdWatchlistsExecute(r)
}

/*
PostTradingAccountsAccountIdWatchlists Create a new watchlist

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId Unique identifier of an account.
 @return DefaultApiApiPostTradingAccountsAccountIdWatchlistsRequest
*/
func (a *DefaultApiService) PostTradingAccountsAccountIdWatchlists(ctx _context.Context, accountId string) DefaultApiApiPostTradingAccountsAccountIdWatchlistsRequest {
	return DefaultApiApiPostTradingAccountsAccountIdWatchlistsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return Watchlist
func (a *DefaultApiService) PostTradingAccountsAccountIdWatchlistsExecute(r DefaultApiApiPostTradingAccountsAccountIdWatchlistsRequest) (Watchlist, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Watchlist
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PostTradingAccountsAccountIdWatchlists")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trading/accounts/{account_id}/watchlists"
	localVarPath = strings.Replace(localVarPath, "{"+"account_id"+"}", _neturl.PathEscape(parameterToString(r.accountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.watchlist
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiPutAccountsAccountIdWatchlistsWatchlistIdRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	accountId string
	watchlistId string
	inlineObject2 *InlineObject2
}

func (r DefaultApiApiPutAccountsAccountIdWatchlistsWatchlistIdRequest) InlineObject2(inlineObject2 InlineObject2) DefaultApiApiPutAccountsAccountIdWatchlistsWatchlistIdRequest {
	r.inlineObject2 = &inlineObject2
	return r
}

func (r DefaultApiApiPutAccountsAccountIdWatchlistsWatchlistIdRequest) Execute() (Watchlist, *_nethttp.Response, error) {
	return r.ApiService.PutAccountsAccountIdWatchlistsWatchlistIdExecute(r)
}

/*
PutAccountsAccountIdWatchlistsWatchlistId Update an existing watchlist

Replace entirely the set of securities contained in the watchlist while optionally renaming it. Destructive operation.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId Unique identifier of an account
 @param watchlistId Unique identifier of a watchlist
 @return DefaultApiApiPutAccountsAccountIdWatchlistsWatchlistIdRequest
*/
func (a *DefaultApiService) PutAccountsAccountIdWatchlistsWatchlistId(ctx _context.Context, accountId string, watchlistId string) DefaultApiApiPutAccountsAccountIdWatchlistsWatchlistIdRequest {
	return DefaultApiApiPutAccountsAccountIdWatchlistsWatchlistIdRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		watchlistId: watchlistId,
	}
}

// Execute executes the request
//  @return Watchlist
func (a *DefaultApiService) PutAccountsAccountIdWatchlistsWatchlistIdExecute(r DefaultApiApiPutAccountsAccountIdWatchlistsWatchlistIdRequest) (Watchlist, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Watchlist
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PutAccountsAccountIdWatchlistsWatchlistId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accounts/{account_id}/watchlists/{watchlist_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_id"+"}", _neturl.PathEscape(parameterToString(r.accountId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"watchlist_id"+"}", _neturl.PathEscape(parameterToString(r.watchlistId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
