/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// JournalJNLC struct for JournalJNLC
type JournalJNLC struct {
	// journal ID
	Id string `json:"id"`
	// JNLC (constant)
	EntryType string `json:"entry_type"`
	// account ID the amount goes from
	FromAccount string `json:"from_account"`
	ToAccount string `json:"to_account"`
	// ID the amount goes to
	Description *string `json:"description,omitempty"`
	SettleDate NullableString `json:"settle_date"`
	Status *string `json:"status,omitempty"`
	NetAmount float64 `json:"net_amount"`
	// max 255 characters
	TransmitterName *string `json:"transmitter_name,omitempty"`
	// max 255 characters
	TransmitterAccountNumber *string `json:"transmitter_account_number,omitempty"`
	// max 255 characters
	TransmitterAddress *string `json:"transmitter_address,omitempty"`
	// max 255 characters
	TransmitterFinancialInstitution *string `json:"transmitter_financial_institution,omitempty"`
	TransmitterTimestamp *time.Time `json:"transmitter_timestamp,omitempty"`
}

// NewJournalJNLC instantiates a new JournalJNLC object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJournalJNLC(id string, entryType string, fromAccount string, toAccount string, settleDate NullableString, netAmount float64) *JournalJNLC {
	this := JournalJNLC{}
	this.Id = id
	this.EntryType = entryType
	this.FromAccount = fromAccount
	this.ToAccount = toAccount
	this.SettleDate = settleDate
	this.NetAmount = netAmount
	return &this
}

// NewJournalJNLCWithDefaults instantiates a new JournalJNLC object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJournalJNLCWithDefaults() *JournalJNLC {
	this := JournalJNLC{}
	return &this
}

// GetId returns the Id field value
func (o *JournalJNLC) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *JournalJNLC) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *JournalJNLC) SetId(v string) {
	o.Id = v
}

// GetEntryType returns the EntryType field value
func (o *JournalJNLC) GetEntryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntryType
}

// GetEntryTypeOk returns a tuple with the EntryType field value
// and a boolean to check if the value has been set.
func (o *JournalJNLC) GetEntryTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EntryType, true
}

// SetEntryType sets field value
func (o *JournalJNLC) SetEntryType(v string) {
	o.EntryType = v
}

// GetFromAccount returns the FromAccount field value
func (o *JournalJNLC) GetFromAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromAccount
}

// GetFromAccountOk returns a tuple with the FromAccount field value
// and a boolean to check if the value has been set.
func (o *JournalJNLC) GetFromAccountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FromAccount, true
}

// SetFromAccount sets field value
func (o *JournalJNLC) SetFromAccount(v string) {
	o.FromAccount = v
}

// GetToAccount returns the ToAccount field value
func (o *JournalJNLC) GetToAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToAccount
}

// GetToAccountOk returns a tuple with the ToAccount field value
// and a boolean to check if the value has been set.
func (o *JournalJNLC) GetToAccountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ToAccount, true
}

// SetToAccount sets field value
func (o *JournalJNLC) SetToAccount(v string) {
	o.ToAccount = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *JournalJNLC) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JournalJNLC) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *JournalJNLC) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *JournalJNLC) SetDescription(v string) {
	o.Description = &v
}

// GetSettleDate returns the SettleDate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *JournalJNLC) GetSettleDate() string {
	if o == nil || o.SettleDate.Get() == nil {
		var ret string
		return ret
	}

	return *o.SettleDate.Get()
}

// GetSettleDateOk returns a tuple with the SettleDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JournalJNLC) GetSettleDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SettleDate.Get(), o.SettleDate.IsSet()
}

// SetSettleDate sets field value
func (o *JournalJNLC) SetSettleDate(v string) {
	o.SettleDate.Set(&v)
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *JournalJNLC) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JournalJNLC) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *JournalJNLC) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *JournalJNLC) SetStatus(v string) {
	o.Status = &v
}

// GetNetAmount returns the NetAmount field value
func (o *JournalJNLC) GetNetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.NetAmount
}

// GetNetAmountOk returns a tuple with the NetAmount field value
// and a boolean to check if the value has been set.
func (o *JournalJNLC) GetNetAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NetAmount, true
}

// SetNetAmount sets field value
func (o *JournalJNLC) SetNetAmount(v float64) {
	o.NetAmount = v
}

// GetTransmitterName returns the TransmitterName field value if set, zero value otherwise.
func (o *JournalJNLC) GetTransmitterName() string {
	if o == nil || o.TransmitterName == nil {
		var ret string
		return ret
	}
	return *o.TransmitterName
}

// GetTransmitterNameOk returns a tuple with the TransmitterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JournalJNLC) GetTransmitterNameOk() (*string, bool) {
	if o == nil || o.TransmitterName == nil {
		return nil, false
	}
	return o.TransmitterName, true
}

// HasTransmitterName returns a boolean if a field has been set.
func (o *JournalJNLC) HasTransmitterName() bool {
	if o != nil && o.TransmitterName != nil {
		return true
	}

	return false
}

// SetTransmitterName gets a reference to the given string and assigns it to the TransmitterName field.
func (o *JournalJNLC) SetTransmitterName(v string) {
	o.TransmitterName = &v
}

// GetTransmitterAccountNumber returns the TransmitterAccountNumber field value if set, zero value otherwise.
func (o *JournalJNLC) GetTransmitterAccountNumber() string {
	if o == nil || o.TransmitterAccountNumber == nil {
		var ret string
		return ret
	}
	return *o.TransmitterAccountNumber
}

// GetTransmitterAccountNumberOk returns a tuple with the TransmitterAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JournalJNLC) GetTransmitterAccountNumberOk() (*string, bool) {
	if o == nil || o.TransmitterAccountNumber == nil {
		return nil, false
	}
	return o.TransmitterAccountNumber, true
}

// HasTransmitterAccountNumber returns a boolean if a field has been set.
func (o *JournalJNLC) HasTransmitterAccountNumber() bool {
	if o != nil && o.TransmitterAccountNumber != nil {
		return true
	}

	return false
}

// SetTransmitterAccountNumber gets a reference to the given string and assigns it to the TransmitterAccountNumber field.
func (o *JournalJNLC) SetTransmitterAccountNumber(v string) {
	o.TransmitterAccountNumber = &v
}

// GetTransmitterAddress returns the TransmitterAddress field value if set, zero value otherwise.
func (o *JournalJNLC) GetTransmitterAddress() string {
	if o == nil || o.TransmitterAddress == nil {
		var ret string
		return ret
	}
	return *o.TransmitterAddress
}

// GetTransmitterAddressOk returns a tuple with the TransmitterAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JournalJNLC) GetTransmitterAddressOk() (*string, bool) {
	if o == nil || o.TransmitterAddress == nil {
		return nil, false
	}
	return o.TransmitterAddress, true
}

// HasTransmitterAddress returns a boolean if a field has been set.
func (o *JournalJNLC) HasTransmitterAddress() bool {
	if o != nil && o.TransmitterAddress != nil {
		return true
	}

	return false
}

// SetTransmitterAddress gets a reference to the given string and assigns it to the TransmitterAddress field.
func (o *JournalJNLC) SetTransmitterAddress(v string) {
	o.TransmitterAddress = &v
}

// GetTransmitterFinancialInstitution returns the TransmitterFinancialInstitution field value if set, zero value otherwise.
func (o *JournalJNLC) GetTransmitterFinancialInstitution() string {
	if o == nil || o.TransmitterFinancialInstitution == nil {
		var ret string
		return ret
	}
	return *o.TransmitterFinancialInstitution
}

// GetTransmitterFinancialInstitutionOk returns a tuple with the TransmitterFinancialInstitution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JournalJNLC) GetTransmitterFinancialInstitutionOk() (*string, bool) {
	if o == nil || o.TransmitterFinancialInstitution == nil {
		return nil, false
	}
	return o.TransmitterFinancialInstitution, true
}

// HasTransmitterFinancialInstitution returns a boolean if a field has been set.
func (o *JournalJNLC) HasTransmitterFinancialInstitution() bool {
	if o != nil && o.TransmitterFinancialInstitution != nil {
		return true
	}

	return false
}

// SetTransmitterFinancialInstitution gets a reference to the given string and assigns it to the TransmitterFinancialInstitution field.
func (o *JournalJNLC) SetTransmitterFinancialInstitution(v string) {
	o.TransmitterFinancialInstitution = &v
}

// GetTransmitterTimestamp returns the TransmitterTimestamp field value if set, zero value otherwise.
func (o *JournalJNLC) GetTransmitterTimestamp() time.Time {
	if o == nil || o.TransmitterTimestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.TransmitterTimestamp
}

// GetTransmitterTimestampOk returns a tuple with the TransmitterTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JournalJNLC) GetTransmitterTimestampOk() (*time.Time, bool) {
	if o == nil || o.TransmitterTimestamp == nil {
		return nil, false
	}
	return o.TransmitterTimestamp, true
}

// HasTransmitterTimestamp returns a boolean if a field has been set.
func (o *JournalJNLC) HasTransmitterTimestamp() bool {
	if o != nil && o.TransmitterTimestamp != nil {
		return true
	}

	return false
}

// SetTransmitterTimestamp gets a reference to the given time.Time and assigns it to the TransmitterTimestamp field.
func (o *JournalJNLC) SetTransmitterTimestamp(v time.Time) {
	o.TransmitterTimestamp = &v
}

func (o JournalJNLC) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["entry_type"] = o.EntryType
	}
	if true {
		toSerialize["from_account"] = o.FromAccount
	}
	if true {
		toSerialize["to_account"] = o.ToAccount
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["settle_date"] = o.SettleDate.Get()
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["net_amount"] = o.NetAmount
	}
	if o.TransmitterName != nil {
		toSerialize["transmitter_name"] = o.TransmitterName
	}
	if o.TransmitterAccountNumber != nil {
		toSerialize["transmitter_account_number"] = o.TransmitterAccountNumber
	}
	if o.TransmitterAddress != nil {
		toSerialize["transmitter_address"] = o.TransmitterAddress
	}
	if o.TransmitterFinancialInstitution != nil {
		toSerialize["transmitter_financial_institution"] = o.TransmitterFinancialInstitution
	}
	if o.TransmitterTimestamp != nil {
		toSerialize["transmitter_timestamp"] = o.TransmitterTimestamp
	}
	return json.Marshal(toSerialize)
}

type NullableJournalJNLC struct {
	value *JournalJNLC
	isSet bool
}

func (v NullableJournalJNLC) Get() *JournalJNLC {
	return v.value
}

func (v *NullableJournalJNLC) Set(val *JournalJNLC) {
	v.value = val
	v.isSet = true
}

func (v NullableJournalJNLC) IsSet() bool {
	return v.isSet
}

func (v *NullableJournalJNLC) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJournalJNLC(val *JournalJNLC) *NullableJournalJNLC {
	return &NullableJournalJNLC{value: val, isSet: true}
}

func (v NullableJournalJNLC) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJournalJNLC) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


