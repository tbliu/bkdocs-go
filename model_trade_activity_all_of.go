/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TradeActivityAllOf struct for TradeActivityAllOf
type TradeActivityAllOf struct {
	TransactionTime *string `json:"transaction_time,omitempty"`
	Type *string `json:"type,omitempty"`
	Price *string `json:"price,omitempty"`
	Qty *string `json:"qty,omitempty"`
	Side *string `json:"side,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	LeavesQty *string `json:"leaves_qty,omitempty"`
	OrderId *string `json:"order_id,omitempty"`
	CumQty *string `json:"cum_qty,omitempty"`
	OrderStatus *string `json:"order_status,omitempty"`
}

// NewTradeActivityAllOf instantiates a new TradeActivityAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTradeActivityAllOf() *TradeActivityAllOf {
	this := TradeActivityAllOf{}
	return &this
}

// NewTradeActivityAllOfWithDefaults instantiates a new TradeActivityAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTradeActivityAllOfWithDefaults() *TradeActivityAllOf {
	this := TradeActivityAllOf{}
	return &this
}

// GetTransactionTime returns the TransactionTime field value if set, zero value otherwise.
func (o *TradeActivityAllOf) GetTransactionTime() string {
	if o == nil || o.TransactionTime == nil {
		var ret string
		return ret
	}
	return *o.TransactionTime
}

// GetTransactionTimeOk returns a tuple with the TransactionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeActivityAllOf) GetTransactionTimeOk() (*string, bool) {
	if o == nil || o.TransactionTime == nil {
		return nil, false
	}
	return o.TransactionTime, true
}

// HasTransactionTime returns a boolean if a field has been set.
func (o *TradeActivityAllOf) HasTransactionTime() bool {
	if o != nil && o.TransactionTime != nil {
		return true
	}

	return false
}

// SetTransactionTime gets a reference to the given string and assigns it to the TransactionTime field.
func (o *TradeActivityAllOf) SetTransactionTime(v string) {
	o.TransactionTime = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TradeActivityAllOf) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeActivityAllOf) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TradeActivityAllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TradeActivityAllOf) SetType(v string) {
	o.Type = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *TradeActivityAllOf) GetPrice() string {
	if o == nil || o.Price == nil {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeActivityAllOf) GetPriceOk() (*string, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *TradeActivityAllOf) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *TradeActivityAllOf) SetPrice(v string) {
	o.Price = &v
}

// GetQty returns the Qty field value if set, zero value otherwise.
func (o *TradeActivityAllOf) GetQty() string {
	if o == nil || o.Qty == nil {
		var ret string
		return ret
	}
	return *o.Qty
}

// GetQtyOk returns a tuple with the Qty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeActivityAllOf) GetQtyOk() (*string, bool) {
	if o == nil || o.Qty == nil {
		return nil, false
	}
	return o.Qty, true
}

// HasQty returns a boolean if a field has been set.
func (o *TradeActivityAllOf) HasQty() bool {
	if o != nil && o.Qty != nil {
		return true
	}

	return false
}

// SetQty gets a reference to the given string and assigns it to the Qty field.
func (o *TradeActivityAllOf) SetQty(v string) {
	o.Qty = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *TradeActivityAllOf) GetSide() string {
	if o == nil || o.Side == nil {
		var ret string
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeActivityAllOf) GetSideOk() (*string, bool) {
	if o == nil || o.Side == nil {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *TradeActivityAllOf) HasSide() bool {
	if o != nil && o.Side != nil {
		return true
	}

	return false
}

// SetSide gets a reference to the given string and assigns it to the Side field.
func (o *TradeActivityAllOf) SetSide(v string) {
	o.Side = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *TradeActivityAllOf) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeActivityAllOf) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *TradeActivityAllOf) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *TradeActivityAllOf) SetSymbol(v string) {
	o.Symbol = &v
}

// GetLeavesQty returns the LeavesQty field value if set, zero value otherwise.
func (o *TradeActivityAllOf) GetLeavesQty() string {
	if o == nil || o.LeavesQty == nil {
		var ret string
		return ret
	}
	return *o.LeavesQty
}

// GetLeavesQtyOk returns a tuple with the LeavesQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeActivityAllOf) GetLeavesQtyOk() (*string, bool) {
	if o == nil || o.LeavesQty == nil {
		return nil, false
	}
	return o.LeavesQty, true
}

// HasLeavesQty returns a boolean if a field has been set.
func (o *TradeActivityAllOf) HasLeavesQty() bool {
	if o != nil && o.LeavesQty != nil {
		return true
	}

	return false
}

// SetLeavesQty gets a reference to the given string and assigns it to the LeavesQty field.
func (o *TradeActivityAllOf) SetLeavesQty(v string) {
	o.LeavesQty = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *TradeActivityAllOf) GetOrderId() string {
	if o == nil || o.OrderId == nil {
		var ret string
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeActivityAllOf) GetOrderIdOk() (*string, bool) {
	if o == nil || o.OrderId == nil {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *TradeActivityAllOf) HasOrderId() bool {
	if o != nil && o.OrderId != nil {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given string and assigns it to the OrderId field.
func (o *TradeActivityAllOf) SetOrderId(v string) {
	o.OrderId = &v
}

// GetCumQty returns the CumQty field value if set, zero value otherwise.
func (o *TradeActivityAllOf) GetCumQty() string {
	if o == nil || o.CumQty == nil {
		var ret string
		return ret
	}
	return *o.CumQty
}

// GetCumQtyOk returns a tuple with the CumQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeActivityAllOf) GetCumQtyOk() (*string, bool) {
	if o == nil || o.CumQty == nil {
		return nil, false
	}
	return o.CumQty, true
}

// HasCumQty returns a boolean if a field has been set.
func (o *TradeActivityAllOf) HasCumQty() bool {
	if o != nil && o.CumQty != nil {
		return true
	}

	return false
}

// SetCumQty gets a reference to the given string and assigns it to the CumQty field.
func (o *TradeActivityAllOf) SetCumQty(v string) {
	o.CumQty = &v
}

// GetOrderStatus returns the OrderStatus field value if set, zero value otherwise.
func (o *TradeActivityAllOf) GetOrderStatus() string {
	if o == nil || o.OrderStatus == nil {
		var ret string
		return ret
	}
	return *o.OrderStatus
}

// GetOrderStatusOk returns a tuple with the OrderStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeActivityAllOf) GetOrderStatusOk() (*string, bool) {
	if o == nil || o.OrderStatus == nil {
		return nil, false
	}
	return o.OrderStatus, true
}

// HasOrderStatus returns a boolean if a field has been set.
func (o *TradeActivityAllOf) HasOrderStatus() bool {
	if o != nil && o.OrderStatus != nil {
		return true
	}

	return false
}

// SetOrderStatus gets a reference to the given string and assigns it to the OrderStatus field.
func (o *TradeActivityAllOf) SetOrderStatus(v string) {
	o.OrderStatus = &v
}

func (o TradeActivityAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TransactionTime != nil {
		toSerialize["transaction_time"] = o.TransactionTime
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Qty != nil {
		toSerialize["qty"] = o.Qty
	}
	if o.Side != nil {
		toSerialize["side"] = o.Side
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.LeavesQty != nil {
		toSerialize["leaves_qty"] = o.LeavesQty
	}
	if o.OrderId != nil {
		toSerialize["order_id"] = o.OrderId
	}
	if o.CumQty != nil {
		toSerialize["cum_qty"] = o.CumQty
	}
	if o.OrderStatus != nil {
		toSerialize["order_status"] = o.OrderStatus
	}
	return json.Marshal(toSerialize)
}

type NullableTradeActivityAllOf struct {
	value *TradeActivityAllOf
	isSet bool
}

func (v NullableTradeActivityAllOf) Get() *TradeActivityAllOf {
	return v.value
}

func (v *NullableTradeActivityAllOf) Set(val *TradeActivityAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTradeActivityAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTradeActivityAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTradeActivityAllOf(val *TradeActivityAllOf) *NullableTradeActivityAllOf {
	return &NullableTradeActivityAllOf{value: val, isSet: true}
}

func (v NullableTradeActivityAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTradeActivityAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


