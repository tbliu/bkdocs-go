/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// PatchOrder struct for PatchOrder
type PatchOrder struct {
	Qty *float64 `json:"qty,omitempty"`
	TimeInForce *string `json:"time_in_force,omitempty"`
	LimitPrice *float64 `json:"limit_price,omitempty"`
	StopPrice *float64 `json:"stop_price,omitempty"`
	Trail *float64 `json:"trail,omitempty"`
	ClientOrderId *string `json:"client_order_id,omitempty"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// NewPatchOrder instantiates a new PatchOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchOrder(createdAt time.Time, updatedAt time.Time) *PatchOrder {
	this := PatchOrder{}
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewPatchOrderWithDefaults instantiates a new PatchOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchOrderWithDefaults() *PatchOrder {
	this := PatchOrder{}
	return &this
}

// GetQty returns the Qty field value if set, zero value otherwise.
func (o *PatchOrder) GetQty() float64 {
	if o == nil || o.Qty == nil {
		var ret float64
		return ret
	}
	return *o.Qty
}

// GetQtyOk returns a tuple with the Qty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchOrder) GetQtyOk() (*float64, bool) {
	if o == nil || o.Qty == nil {
		return nil, false
	}
	return o.Qty, true
}

// HasQty returns a boolean if a field has been set.
func (o *PatchOrder) HasQty() bool {
	if o != nil && o.Qty != nil {
		return true
	}

	return false
}

// SetQty gets a reference to the given float64 and assigns it to the Qty field.
func (o *PatchOrder) SetQty(v float64) {
	o.Qty = &v
}

// GetTimeInForce returns the TimeInForce field value if set, zero value otherwise.
func (o *PatchOrder) GetTimeInForce() string {
	if o == nil || o.TimeInForce == nil {
		var ret string
		return ret
	}
	return *o.TimeInForce
}

// GetTimeInForceOk returns a tuple with the TimeInForce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchOrder) GetTimeInForceOk() (*string, bool) {
	if o == nil || o.TimeInForce == nil {
		return nil, false
	}
	return o.TimeInForce, true
}

// HasTimeInForce returns a boolean if a field has been set.
func (o *PatchOrder) HasTimeInForce() bool {
	if o != nil && o.TimeInForce != nil {
		return true
	}

	return false
}

// SetTimeInForce gets a reference to the given string and assigns it to the TimeInForce field.
func (o *PatchOrder) SetTimeInForce(v string) {
	o.TimeInForce = &v
}

// GetLimitPrice returns the LimitPrice field value if set, zero value otherwise.
func (o *PatchOrder) GetLimitPrice() float64 {
	if o == nil || o.LimitPrice == nil {
		var ret float64
		return ret
	}
	return *o.LimitPrice
}

// GetLimitPriceOk returns a tuple with the LimitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchOrder) GetLimitPriceOk() (*float64, bool) {
	if o == nil || o.LimitPrice == nil {
		return nil, false
	}
	return o.LimitPrice, true
}

// HasLimitPrice returns a boolean if a field has been set.
func (o *PatchOrder) HasLimitPrice() bool {
	if o != nil && o.LimitPrice != nil {
		return true
	}

	return false
}

// SetLimitPrice gets a reference to the given float64 and assigns it to the LimitPrice field.
func (o *PatchOrder) SetLimitPrice(v float64) {
	o.LimitPrice = &v
}

// GetStopPrice returns the StopPrice field value if set, zero value otherwise.
func (o *PatchOrder) GetStopPrice() float64 {
	if o == nil || o.StopPrice == nil {
		var ret float64
		return ret
	}
	return *o.StopPrice
}

// GetStopPriceOk returns a tuple with the StopPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchOrder) GetStopPriceOk() (*float64, bool) {
	if o == nil || o.StopPrice == nil {
		return nil, false
	}
	return o.StopPrice, true
}

// HasStopPrice returns a boolean if a field has been set.
func (o *PatchOrder) HasStopPrice() bool {
	if o != nil && o.StopPrice != nil {
		return true
	}

	return false
}

// SetStopPrice gets a reference to the given float64 and assigns it to the StopPrice field.
func (o *PatchOrder) SetStopPrice(v float64) {
	o.StopPrice = &v
}

// GetTrail returns the Trail field value if set, zero value otherwise.
func (o *PatchOrder) GetTrail() float64 {
	if o == nil || o.Trail == nil {
		var ret float64
		return ret
	}
	return *o.Trail
}

// GetTrailOk returns a tuple with the Trail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchOrder) GetTrailOk() (*float64, bool) {
	if o == nil || o.Trail == nil {
		return nil, false
	}
	return o.Trail, true
}

// HasTrail returns a boolean if a field has been set.
func (o *PatchOrder) HasTrail() bool {
	if o != nil && o.Trail != nil {
		return true
	}

	return false
}

// SetTrail gets a reference to the given float64 and assigns it to the Trail field.
func (o *PatchOrder) SetTrail(v float64) {
	o.Trail = &v
}

// GetClientOrderId returns the ClientOrderId field value if set, zero value otherwise.
func (o *PatchOrder) GetClientOrderId() string {
	if o == nil || o.ClientOrderId == nil {
		var ret string
		return ret
	}
	return *o.ClientOrderId
}

// GetClientOrderIdOk returns a tuple with the ClientOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchOrder) GetClientOrderIdOk() (*string, bool) {
	if o == nil || o.ClientOrderId == nil {
		return nil, false
	}
	return o.ClientOrderId, true
}

// HasClientOrderId returns a boolean if a field has been set.
func (o *PatchOrder) HasClientOrderId() bool {
	if o != nil && o.ClientOrderId != nil {
		return true
	}

	return false
}

// SetClientOrderId gets a reference to the given string and assigns it to the ClientOrderId field.
func (o *PatchOrder) SetClientOrderId(v string) {
	o.ClientOrderId = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PatchOrder) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PatchOrder) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PatchOrder) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PatchOrder) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PatchOrder) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PatchOrder) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o PatchOrder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Qty != nil {
		toSerialize["qty"] = o.Qty
	}
	if o.TimeInForce != nil {
		toSerialize["time_in_force"] = o.TimeInForce
	}
	if o.LimitPrice != nil {
		toSerialize["limit_price"] = o.LimitPrice
	}
	if o.StopPrice != nil {
		toSerialize["stop_price"] = o.StopPrice
	}
	if o.Trail != nil {
		toSerialize["trail"] = o.Trail
	}
	if o.ClientOrderId != nil {
		toSerialize["client_order_id"] = o.ClientOrderId
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullablePatchOrder struct {
	value *PatchOrder
	isSet bool
}

func (v NullablePatchOrder) Get() *PatchOrder {
	return v.value
}

func (v *NullablePatchOrder) Set(val *PatchOrder) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchOrder) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchOrder(val *PatchOrder) *NullablePatchOrder {
	return &NullablePatchOrder{value: val, isSet: true}
}

func (v NullablePatchOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


