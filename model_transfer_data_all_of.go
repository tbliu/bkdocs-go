/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransferDataAllOf struct for TransferDataAllOf
type TransferDataAllOf struct {
	TransferType string `json:"transfer_type"`
	Timing *string `json:"timing,omitempty"`
}

// NewTransferDataAllOf instantiates a new TransferDataAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferDataAllOf(transferType string) *TransferDataAllOf {
	this := TransferDataAllOf{}
	this.TransferType = transferType
	return &this
}

// NewTransferDataAllOfWithDefaults instantiates a new TransferDataAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferDataAllOfWithDefaults() *TransferDataAllOf {
	this := TransferDataAllOf{}
	return &this
}

// GetTransferType returns the TransferType field value
func (o *TransferDataAllOf) GetTransferType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransferType
}

// GetTransferTypeOk returns a tuple with the TransferType field value
// and a boolean to check if the value has been set.
func (o *TransferDataAllOf) GetTransferTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TransferType, true
}

// SetTransferType sets field value
func (o *TransferDataAllOf) SetTransferType(v string) {
	o.TransferType = v
}

// GetTiming returns the Timing field value if set, zero value otherwise.
func (o *TransferDataAllOf) GetTiming() string {
	if o == nil || o.Timing == nil {
		var ret string
		return ret
	}
	return *o.Timing
}

// GetTimingOk returns a tuple with the Timing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferDataAllOf) GetTimingOk() (*string, bool) {
	if o == nil || o.Timing == nil {
		return nil, false
	}
	return o.Timing, true
}

// HasTiming returns a boolean if a field has been set.
func (o *TransferDataAllOf) HasTiming() bool {
	if o != nil && o.Timing != nil {
		return true
	}

	return false
}

// SetTiming gets a reference to the given string and assigns it to the Timing field.
func (o *TransferDataAllOf) SetTiming(v string) {
	o.Timing = &v
}

func (o TransferDataAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["transfer_type"] = o.TransferType
	}
	if o.Timing != nil {
		toSerialize["timing"] = o.Timing
	}
	return json.Marshal(toSerialize)
}

type NullableTransferDataAllOf struct {
	value *TransferDataAllOf
	isSet bool
}

func (v NullableTransferDataAllOf) Get() *TransferDataAllOf {
	return v.value
}

func (v *NullableTransferDataAllOf) Set(val *TransferDataAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferDataAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferDataAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferDataAllOf(val *TransferDataAllOf) *NullableTransferDataAllOf {
	return &NullableTransferDataAllOf{value: val, isSet: true}
}

func (v NullableTransferDataAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferDataAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


