/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2001 struct for InlineResponse2001
type InlineResponse2001 struct {
	Timestamp *string `json:"timestamp,omitempty"`
	IsOpen *bool `json:"is_open,omitempty"`
	NextOpen *string `json:"next_open,omitempty"`
	NextClose *string `json:"next_close,omitempty"`
}

// NewInlineResponse2001 instantiates a new InlineResponse2001 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2001() *InlineResponse2001 {
	this := InlineResponse2001{}
	return &this
}

// NewInlineResponse2001WithDefaults instantiates a new InlineResponse2001 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2001WithDefaults() *InlineResponse2001 {
	this := InlineResponse2001{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *InlineResponse2001) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *InlineResponse2001) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *InlineResponse2001) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetIsOpen returns the IsOpen field value if set, zero value otherwise.
func (o *InlineResponse2001) GetIsOpen() bool {
	if o == nil || o.IsOpen == nil {
		var ret bool
		return ret
	}
	return *o.IsOpen
}

// GetIsOpenOk returns a tuple with the IsOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001) GetIsOpenOk() (*bool, bool) {
	if o == nil || o.IsOpen == nil {
		return nil, false
	}
	return o.IsOpen, true
}

// HasIsOpen returns a boolean if a field has been set.
func (o *InlineResponse2001) HasIsOpen() bool {
	if o != nil && o.IsOpen != nil {
		return true
	}

	return false
}

// SetIsOpen gets a reference to the given bool and assigns it to the IsOpen field.
func (o *InlineResponse2001) SetIsOpen(v bool) {
	o.IsOpen = &v
}

// GetNextOpen returns the NextOpen field value if set, zero value otherwise.
func (o *InlineResponse2001) GetNextOpen() string {
	if o == nil || o.NextOpen == nil {
		var ret string
		return ret
	}
	return *o.NextOpen
}

// GetNextOpenOk returns a tuple with the NextOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001) GetNextOpenOk() (*string, bool) {
	if o == nil || o.NextOpen == nil {
		return nil, false
	}
	return o.NextOpen, true
}

// HasNextOpen returns a boolean if a field has been set.
func (o *InlineResponse2001) HasNextOpen() bool {
	if o != nil && o.NextOpen != nil {
		return true
	}

	return false
}

// SetNextOpen gets a reference to the given string and assigns it to the NextOpen field.
func (o *InlineResponse2001) SetNextOpen(v string) {
	o.NextOpen = &v
}

// GetNextClose returns the NextClose field value if set, zero value otherwise.
func (o *InlineResponse2001) GetNextClose() string {
	if o == nil || o.NextClose == nil {
		var ret string
		return ret
	}
	return *o.NextClose
}

// GetNextCloseOk returns a tuple with the NextClose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001) GetNextCloseOk() (*string, bool) {
	if o == nil || o.NextClose == nil {
		return nil, false
	}
	return o.NextClose, true
}

// HasNextClose returns a boolean if a field has been set.
func (o *InlineResponse2001) HasNextClose() bool {
	if o != nil && o.NextClose != nil {
		return true
	}

	return false
}

// SetNextClose gets a reference to the given string and assigns it to the NextClose field.
func (o *InlineResponse2001) SetNextClose(v string) {
	o.NextClose = &v
}

func (o InlineResponse2001) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.IsOpen != nil {
		toSerialize["is_open"] = o.IsOpen
	}
	if o.NextOpen != nil {
		toSerialize["next_open"] = o.NextOpen
	}
	if o.NextClose != nil {
		toSerialize["next_close"] = o.NextClose
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2001 struct {
	value *InlineResponse2001
	isSet bool
}

func (v NullableInlineResponse2001) Get() *InlineResponse2001 {
	return v.value
}

func (v *NullableInlineResponse2001) Set(val *InlineResponse2001) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2001) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2001) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2001(val *InlineResponse2001) *NullableInlineResponse2001 {
	return &NullableInlineResponse2001{value: val, isSet: true}
}

func (v NullableInlineResponse2001) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2001) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


