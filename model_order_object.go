/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// OrderObject struct for OrderObject
type OrderObject struct {
	Id *string `json:"id,omitempty"`
	ClientOrderId *string `json:"client_order_id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`
	FilledAt NullableTime `json:"filled_at,omitempty"`
	ExpiredAt NullableTime `json:"expired_at,omitempty"`
	CanceledAt NullableTime `json:"canceled_at,omitempty"`
	FailedAt NullableTime `json:"failed_at,omitempty"`
	ReplacedAt NullableTime `json:"replaced_at,omitempty"`
	ReplacedBy NullableString `json:"replaced_by,omitempty"`
	Replaces NullableString `json:"replaces,omitempty"`
	AssetId *string `json:"asset_id,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	AssetClass *string `json:"asset_class,omitempty"`
	Notional NullableFloat64 `json:"notional,omitempty"`
	Qty NullableFloat64 `json:"qty,omitempty"`
	FilledQty *float64 `json:"filled_qty,omitempty"`
	FilledAvgPrice NullableFloat64 `json:"filled_avg_price,omitempty"`
	OrderClass *string `json:"order_class,omitempty"`
	OrderType *string `json:"order_type,omitempty"`
	Type *string `json:"type,omitempty"`
	Side *string `json:"side,omitempty"`
	TimeInForce *string `json:"time_in_force,omitempty"`
	LimitPrice NullableFloat64 `json:"limit_price,omitempty"`
	StopPrice NullableFloat64 `json:"stop_price,omitempty"`
	Status *string `json:"status,omitempty"`
	ExtendedHours *bool `json:"extended_hours,omitempty"`
	Legs []OrderObject `json:"legs,omitempty"`
	TrailPrice NullableFloat64 `json:"trail_price,omitempty"`
	TrailPercent NullableFloat64 `json:"trail_percent,omitempty"`
	Hwm NullableFloat64 `json:"hwm,omitempty"`
	Commission *float64 `json:"commission,omitempty"`
}

// NewOrderObject instantiates a new OrderObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderObject() *OrderObject {
	this := OrderObject{}
	return &this
}

// NewOrderObjectWithDefaults instantiates a new OrderObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderObjectWithDefaults() *OrderObject {
	this := OrderObject{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrderObject) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderObject) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrderObject) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrderObject) SetId(v string) {
	o.Id = &v
}

// GetClientOrderId returns the ClientOrderId field value if set, zero value otherwise.
func (o *OrderObject) GetClientOrderId() string {
	if o == nil || o.ClientOrderId == nil {
		var ret string
		return ret
	}
	return *o.ClientOrderId
}

// GetClientOrderIdOk returns a tuple with the ClientOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderObject) GetClientOrderIdOk() (*string, bool) {
	if o == nil || o.ClientOrderId == nil {
		return nil, false
	}
	return o.ClientOrderId, true
}

// HasClientOrderId returns a boolean if a field has been set.
func (o *OrderObject) HasClientOrderId() bool {
	if o != nil && o.ClientOrderId != nil {
		return true
	}

	return false
}

// SetClientOrderId gets a reference to the given string and assigns it to the ClientOrderId field.
func (o *OrderObject) SetClientOrderId(v string) {
	o.ClientOrderId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *OrderObject) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderObject) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OrderObject) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *OrderObject) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *OrderObject) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderObject) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *OrderObject) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *OrderObject) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetSubmittedAt returns the SubmittedAt field value if set, zero value otherwise.
func (o *OrderObject) GetSubmittedAt() time.Time {
	if o == nil || o.SubmittedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.SubmittedAt
}

// GetSubmittedAtOk returns a tuple with the SubmittedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderObject) GetSubmittedAtOk() (*time.Time, bool) {
	if o == nil || o.SubmittedAt == nil {
		return nil, false
	}
	return o.SubmittedAt, true
}

// HasSubmittedAt returns a boolean if a field has been set.
func (o *OrderObject) HasSubmittedAt() bool {
	if o != nil && o.SubmittedAt != nil {
		return true
	}

	return false
}

// SetSubmittedAt gets a reference to the given time.Time and assigns it to the SubmittedAt field.
func (o *OrderObject) SetSubmittedAt(v time.Time) {
	o.SubmittedAt = &v
}

// GetFilledAt returns the FilledAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderObject) GetFilledAt() time.Time {
	if o == nil || o.FilledAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.FilledAt.Get()
}

// GetFilledAtOk returns a tuple with the FilledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderObject) GetFilledAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FilledAt.Get(), o.FilledAt.IsSet()
}

// HasFilledAt returns a boolean if a field has been set.
func (o *OrderObject) HasFilledAt() bool {
	if o != nil && o.FilledAt.IsSet() {
		return true
	}

	return false
}

// SetFilledAt gets a reference to the given NullableTime and assigns it to the FilledAt field.
func (o *OrderObject) SetFilledAt(v time.Time) {
	o.FilledAt.Set(&v)
}
// SetFilledAtNil sets the value for FilledAt to be an explicit nil
func (o *OrderObject) SetFilledAtNil() {
	o.FilledAt.Set(nil)
}

// UnsetFilledAt ensures that no value is present for FilledAt, not even an explicit nil
func (o *OrderObject) UnsetFilledAt() {
	o.FilledAt.Unset()
}

// GetExpiredAt returns the ExpiredAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderObject) GetExpiredAt() time.Time {
	if o == nil || o.ExpiredAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiredAt.Get()
}

// GetExpiredAtOk returns a tuple with the ExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderObject) GetExpiredAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiredAt.Get(), o.ExpiredAt.IsSet()
}

// HasExpiredAt returns a boolean if a field has been set.
func (o *OrderObject) HasExpiredAt() bool {
	if o != nil && o.ExpiredAt.IsSet() {
		return true
	}

	return false
}

// SetExpiredAt gets a reference to the given NullableTime and assigns it to the ExpiredAt field.
func (o *OrderObject) SetExpiredAt(v time.Time) {
	o.ExpiredAt.Set(&v)
}
// SetExpiredAtNil sets the value for ExpiredAt to be an explicit nil
func (o *OrderObject) SetExpiredAtNil() {
	o.ExpiredAt.Set(nil)
}

// UnsetExpiredAt ensures that no value is present for ExpiredAt, not even an explicit nil
func (o *OrderObject) UnsetExpiredAt() {
	o.ExpiredAt.Unset()
}

// GetCanceledAt returns the CanceledAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderObject) GetCanceledAt() time.Time {
	if o == nil || o.CanceledAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.CanceledAt.Get()
}

// GetCanceledAtOk returns a tuple with the CanceledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderObject) GetCanceledAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CanceledAt.Get(), o.CanceledAt.IsSet()
}

// HasCanceledAt returns a boolean if a field has been set.
func (o *OrderObject) HasCanceledAt() bool {
	if o != nil && o.CanceledAt.IsSet() {
		return true
	}

	return false
}

// SetCanceledAt gets a reference to the given NullableTime and assigns it to the CanceledAt field.
func (o *OrderObject) SetCanceledAt(v time.Time) {
	o.CanceledAt.Set(&v)
}
// SetCanceledAtNil sets the value for CanceledAt to be an explicit nil
func (o *OrderObject) SetCanceledAtNil() {
	o.CanceledAt.Set(nil)
}

// UnsetCanceledAt ensures that no value is present for CanceledAt, not even an explicit nil
func (o *OrderObject) UnsetCanceledAt() {
	o.CanceledAt.Unset()
}

// GetFailedAt returns the FailedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderObject) GetFailedAt() time.Time {
	if o == nil || o.FailedAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.FailedAt.Get()
}

// GetFailedAtOk returns a tuple with the FailedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderObject) GetFailedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FailedAt.Get(), o.FailedAt.IsSet()
}

// HasFailedAt returns a boolean if a field has been set.
func (o *OrderObject) HasFailedAt() bool {
	if o != nil && o.FailedAt.IsSet() {
		return true
	}

	return false
}

// SetFailedAt gets a reference to the given NullableTime and assigns it to the FailedAt field.
func (o *OrderObject) SetFailedAt(v time.Time) {
	o.FailedAt.Set(&v)
}
// SetFailedAtNil sets the value for FailedAt to be an explicit nil
func (o *OrderObject) SetFailedAtNil() {
	o.FailedAt.Set(nil)
}

// UnsetFailedAt ensures that no value is present for FailedAt, not even an explicit nil
func (o *OrderObject) UnsetFailedAt() {
	o.FailedAt.Unset()
}

// GetReplacedAt returns the ReplacedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderObject) GetReplacedAt() time.Time {
	if o == nil || o.ReplacedAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ReplacedAt.Get()
}

// GetReplacedAtOk returns a tuple with the ReplacedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderObject) GetReplacedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReplacedAt.Get(), o.ReplacedAt.IsSet()
}

// HasReplacedAt returns a boolean if a field has been set.
func (o *OrderObject) HasReplacedAt() bool {
	if o != nil && o.ReplacedAt.IsSet() {
		return true
	}

	return false
}

// SetReplacedAt gets a reference to the given NullableTime and assigns it to the ReplacedAt field.
func (o *OrderObject) SetReplacedAt(v time.Time) {
	o.ReplacedAt.Set(&v)
}
// SetReplacedAtNil sets the value for ReplacedAt to be an explicit nil
func (o *OrderObject) SetReplacedAtNil() {
	o.ReplacedAt.Set(nil)
}

// UnsetReplacedAt ensures that no value is present for ReplacedAt, not even an explicit nil
func (o *OrderObject) UnsetReplacedAt() {
	o.ReplacedAt.Unset()
}

// GetReplacedBy returns the ReplacedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderObject) GetReplacedBy() string {
	if o == nil || o.ReplacedBy.Get() == nil {
		var ret string
		return ret
	}
	return *o.ReplacedBy.Get()
}

// GetReplacedByOk returns a tuple with the ReplacedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderObject) GetReplacedByOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReplacedBy.Get(), o.ReplacedBy.IsSet()
}

// HasReplacedBy returns a boolean if a field has been set.
func (o *OrderObject) HasReplacedBy() bool {
	if o != nil && o.ReplacedBy.IsSet() {
		return true
	}

	return false
}

// SetReplacedBy gets a reference to the given NullableString and assigns it to the ReplacedBy field.
func (o *OrderObject) SetReplacedBy(v string) {
	o.ReplacedBy.Set(&v)
}
// SetReplacedByNil sets the value for ReplacedBy to be an explicit nil
func (o *OrderObject) SetReplacedByNil() {
	o.ReplacedBy.Set(nil)
}

// UnsetReplacedBy ensures that no value is present for ReplacedBy, not even an explicit nil
func (o *OrderObject) UnsetReplacedBy() {
	o.ReplacedBy.Unset()
}

// GetReplaces returns the Replaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderObject) GetReplaces() string {
	if o == nil || o.Replaces.Get() == nil {
		var ret string
		return ret
	}
	return *o.Replaces.Get()
}

// GetReplacesOk returns a tuple with the Replaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderObject) GetReplacesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Replaces.Get(), o.Replaces.IsSet()
}

// HasReplaces returns a boolean if a field has been set.
func (o *OrderObject) HasReplaces() bool {
	if o != nil && o.Replaces.IsSet() {
		return true
	}

	return false
}

// SetReplaces gets a reference to the given NullableString and assigns it to the Replaces field.
func (o *OrderObject) SetReplaces(v string) {
	o.Replaces.Set(&v)
}
// SetReplacesNil sets the value for Replaces to be an explicit nil
func (o *OrderObject) SetReplacesNil() {
	o.Replaces.Set(nil)
}

// UnsetReplaces ensures that no value is present for Replaces, not even an explicit nil
func (o *OrderObject) UnsetReplaces() {
	o.Replaces.Unset()
}

// GetAssetId returns the AssetId field value if set, zero value otherwise.
func (o *OrderObject) GetAssetId() string {
	if o == nil || o.AssetId == nil {
		var ret string
		return ret
	}
	return *o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderObject) GetAssetIdOk() (*string, bool) {
	if o == nil || o.AssetId == nil {
		return nil, false
	}
	return o.AssetId, true
}

// HasAssetId returns a boolean if a field has been set.
func (o *OrderObject) HasAssetId() bool {
	if o != nil && o.AssetId != nil {
		return true
	}

	return false
}

// SetAssetId gets a reference to the given string and assigns it to the AssetId field.
func (o *OrderObject) SetAssetId(v string) {
	o.AssetId = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *OrderObject) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderObject) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *OrderObject) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *OrderObject) SetSymbol(v string) {
	o.Symbol = &v
}

// GetAssetClass returns the AssetClass field value if set, zero value otherwise.
func (o *OrderObject) GetAssetClass() string {
	if o == nil || o.AssetClass == nil {
		var ret string
		return ret
	}
	return *o.AssetClass
}

// GetAssetClassOk returns a tuple with the AssetClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderObject) GetAssetClassOk() (*string, bool) {
	if o == nil || o.AssetClass == nil {
		return nil, false
	}
	return o.AssetClass, true
}

// HasAssetClass returns a boolean if a field has been set.
func (o *OrderObject) HasAssetClass() bool {
	if o != nil && o.AssetClass != nil {
		return true
	}

	return false
}

// SetAssetClass gets a reference to the given string and assigns it to the AssetClass field.
func (o *OrderObject) SetAssetClass(v string) {
	o.AssetClass = &v
}

// GetNotional returns the Notional field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderObject) GetNotional() float64 {
	if o == nil || o.Notional.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Notional.Get()
}

// GetNotionalOk returns a tuple with the Notional field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderObject) GetNotionalOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Notional.Get(), o.Notional.IsSet()
}

// HasNotional returns a boolean if a field has been set.
func (o *OrderObject) HasNotional() bool {
	if o != nil && o.Notional.IsSet() {
		return true
	}

	return false
}

// SetNotional gets a reference to the given NullableFloat64 and assigns it to the Notional field.
func (o *OrderObject) SetNotional(v float64) {
	o.Notional.Set(&v)
}
// SetNotionalNil sets the value for Notional to be an explicit nil
func (o *OrderObject) SetNotionalNil() {
	o.Notional.Set(nil)
}

// UnsetNotional ensures that no value is present for Notional, not even an explicit nil
func (o *OrderObject) UnsetNotional() {
	o.Notional.Unset()
}

// GetQty returns the Qty field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderObject) GetQty() float64 {
	if o == nil || o.Qty.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Qty.Get()
}

// GetQtyOk returns a tuple with the Qty field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderObject) GetQtyOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Qty.Get(), o.Qty.IsSet()
}

// HasQty returns a boolean if a field has been set.
func (o *OrderObject) HasQty() bool {
	if o != nil && o.Qty.IsSet() {
		return true
	}

	return false
}

// SetQty gets a reference to the given NullableFloat64 and assigns it to the Qty field.
func (o *OrderObject) SetQty(v float64) {
	o.Qty.Set(&v)
}
// SetQtyNil sets the value for Qty to be an explicit nil
func (o *OrderObject) SetQtyNil() {
	o.Qty.Set(nil)
}

// UnsetQty ensures that no value is present for Qty, not even an explicit nil
func (o *OrderObject) UnsetQty() {
	o.Qty.Unset()
}

// GetFilledQty returns the FilledQty field value if set, zero value otherwise.
func (o *OrderObject) GetFilledQty() float64 {
	if o == nil || o.FilledQty == nil {
		var ret float64
		return ret
	}
	return *o.FilledQty
}

// GetFilledQtyOk returns a tuple with the FilledQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderObject) GetFilledQtyOk() (*float64, bool) {
	if o == nil || o.FilledQty == nil {
		return nil, false
	}
	return o.FilledQty, true
}

// HasFilledQty returns a boolean if a field has been set.
func (o *OrderObject) HasFilledQty() bool {
	if o != nil && o.FilledQty != nil {
		return true
	}

	return false
}

// SetFilledQty gets a reference to the given float64 and assigns it to the FilledQty field.
func (o *OrderObject) SetFilledQty(v float64) {
	o.FilledQty = &v
}

// GetFilledAvgPrice returns the FilledAvgPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderObject) GetFilledAvgPrice() float64 {
	if o == nil || o.FilledAvgPrice.Get() == nil {
		var ret float64
		return ret
	}
	return *o.FilledAvgPrice.Get()
}

// GetFilledAvgPriceOk returns a tuple with the FilledAvgPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderObject) GetFilledAvgPriceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FilledAvgPrice.Get(), o.FilledAvgPrice.IsSet()
}

// HasFilledAvgPrice returns a boolean if a field has been set.
func (o *OrderObject) HasFilledAvgPrice() bool {
	if o != nil && o.FilledAvgPrice.IsSet() {
		return true
	}

	return false
}

// SetFilledAvgPrice gets a reference to the given NullableFloat64 and assigns it to the FilledAvgPrice field.
func (o *OrderObject) SetFilledAvgPrice(v float64) {
	o.FilledAvgPrice.Set(&v)
}
// SetFilledAvgPriceNil sets the value for FilledAvgPrice to be an explicit nil
func (o *OrderObject) SetFilledAvgPriceNil() {
	o.FilledAvgPrice.Set(nil)
}

// UnsetFilledAvgPrice ensures that no value is present for FilledAvgPrice, not even an explicit nil
func (o *OrderObject) UnsetFilledAvgPrice() {
	o.FilledAvgPrice.Unset()
}

// GetOrderClass returns the OrderClass field value if set, zero value otherwise.
func (o *OrderObject) GetOrderClass() string {
	if o == nil || o.OrderClass == nil {
		var ret string
		return ret
	}
	return *o.OrderClass
}

// GetOrderClassOk returns a tuple with the OrderClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderObject) GetOrderClassOk() (*string, bool) {
	if o == nil || o.OrderClass == nil {
		return nil, false
	}
	return o.OrderClass, true
}

// HasOrderClass returns a boolean if a field has been set.
func (o *OrderObject) HasOrderClass() bool {
	if o != nil && o.OrderClass != nil {
		return true
	}

	return false
}

// SetOrderClass gets a reference to the given string and assigns it to the OrderClass field.
func (o *OrderObject) SetOrderClass(v string) {
	o.OrderClass = &v
}

// GetOrderType returns the OrderType field value if set, zero value otherwise.
func (o *OrderObject) GetOrderType() string {
	if o == nil || o.OrderType == nil {
		var ret string
		return ret
	}
	return *o.OrderType
}

// GetOrderTypeOk returns a tuple with the OrderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderObject) GetOrderTypeOk() (*string, bool) {
	if o == nil || o.OrderType == nil {
		return nil, false
	}
	return o.OrderType, true
}

// HasOrderType returns a boolean if a field has been set.
func (o *OrderObject) HasOrderType() bool {
	if o != nil && o.OrderType != nil {
		return true
	}

	return false
}

// SetOrderType gets a reference to the given string and assigns it to the OrderType field.
func (o *OrderObject) SetOrderType(v string) {
	o.OrderType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OrderObject) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderObject) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OrderObject) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OrderObject) SetType(v string) {
	o.Type = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *OrderObject) GetSide() string {
	if o == nil || o.Side == nil {
		var ret string
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderObject) GetSideOk() (*string, bool) {
	if o == nil || o.Side == nil {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *OrderObject) HasSide() bool {
	if o != nil && o.Side != nil {
		return true
	}

	return false
}

// SetSide gets a reference to the given string and assigns it to the Side field.
func (o *OrderObject) SetSide(v string) {
	o.Side = &v
}

// GetTimeInForce returns the TimeInForce field value if set, zero value otherwise.
func (o *OrderObject) GetTimeInForce() string {
	if o == nil || o.TimeInForce == nil {
		var ret string
		return ret
	}
	return *o.TimeInForce
}

// GetTimeInForceOk returns a tuple with the TimeInForce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderObject) GetTimeInForceOk() (*string, bool) {
	if o == nil || o.TimeInForce == nil {
		return nil, false
	}
	return o.TimeInForce, true
}

// HasTimeInForce returns a boolean if a field has been set.
func (o *OrderObject) HasTimeInForce() bool {
	if o != nil && o.TimeInForce != nil {
		return true
	}

	return false
}

// SetTimeInForce gets a reference to the given string and assigns it to the TimeInForce field.
func (o *OrderObject) SetTimeInForce(v string) {
	o.TimeInForce = &v
}

// GetLimitPrice returns the LimitPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderObject) GetLimitPrice() float64 {
	if o == nil || o.LimitPrice.Get() == nil {
		var ret float64
		return ret
	}
	return *o.LimitPrice.Get()
}

// GetLimitPriceOk returns a tuple with the LimitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderObject) GetLimitPriceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LimitPrice.Get(), o.LimitPrice.IsSet()
}

// HasLimitPrice returns a boolean if a field has been set.
func (o *OrderObject) HasLimitPrice() bool {
	if o != nil && o.LimitPrice.IsSet() {
		return true
	}

	return false
}

// SetLimitPrice gets a reference to the given NullableFloat64 and assigns it to the LimitPrice field.
func (o *OrderObject) SetLimitPrice(v float64) {
	o.LimitPrice.Set(&v)
}
// SetLimitPriceNil sets the value for LimitPrice to be an explicit nil
func (o *OrderObject) SetLimitPriceNil() {
	o.LimitPrice.Set(nil)
}

// UnsetLimitPrice ensures that no value is present for LimitPrice, not even an explicit nil
func (o *OrderObject) UnsetLimitPrice() {
	o.LimitPrice.Unset()
}

// GetStopPrice returns the StopPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderObject) GetStopPrice() float64 {
	if o == nil || o.StopPrice.Get() == nil {
		var ret float64
		return ret
	}
	return *o.StopPrice.Get()
}

// GetStopPriceOk returns a tuple with the StopPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderObject) GetStopPriceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StopPrice.Get(), o.StopPrice.IsSet()
}

// HasStopPrice returns a boolean if a field has been set.
func (o *OrderObject) HasStopPrice() bool {
	if o != nil && o.StopPrice.IsSet() {
		return true
	}

	return false
}

// SetStopPrice gets a reference to the given NullableFloat64 and assigns it to the StopPrice field.
func (o *OrderObject) SetStopPrice(v float64) {
	o.StopPrice.Set(&v)
}
// SetStopPriceNil sets the value for StopPrice to be an explicit nil
func (o *OrderObject) SetStopPriceNil() {
	o.StopPrice.Set(nil)
}

// UnsetStopPrice ensures that no value is present for StopPrice, not even an explicit nil
func (o *OrderObject) UnsetStopPrice() {
	o.StopPrice.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OrderObject) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderObject) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OrderObject) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *OrderObject) SetStatus(v string) {
	o.Status = &v
}

// GetExtendedHours returns the ExtendedHours field value if set, zero value otherwise.
func (o *OrderObject) GetExtendedHours() bool {
	if o == nil || o.ExtendedHours == nil {
		var ret bool
		return ret
	}
	return *o.ExtendedHours
}

// GetExtendedHoursOk returns a tuple with the ExtendedHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderObject) GetExtendedHoursOk() (*bool, bool) {
	if o == nil || o.ExtendedHours == nil {
		return nil, false
	}
	return o.ExtendedHours, true
}

// HasExtendedHours returns a boolean if a field has been set.
func (o *OrderObject) HasExtendedHours() bool {
	if o != nil && o.ExtendedHours != nil {
		return true
	}

	return false
}

// SetExtendedHours gets a reference to the given bool and assigns it to the ExtendedHours field.
func (o *OrderObject) SetExtendedHours(v bool) {
	o.ExtendedHours = &v
}

// GetLegs returns the Legs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderObject) GetLegs() []OrderObject {
	if o == nil  {
		var ret []OrderObject
		return ret
	}
	return o.Legs
}

// GetLegsOk returns a tuple with the Legs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderObject) GetLegsOk() (*[]OrderObject, bool) {
	if o == nil || o.Legs == nil {
		return nil, false
	}
	return &o.Legs, true
}

// HasLegs returns a boolean if a field has been set.
func (o *OrderObject) HasLegs() bool {
	if o != nil && o.Legs != nil {
		return true
	}

	return false
}

// SetLegs gets a reference to the given []OrderObject and assigns it to the Legs field.
func (o *OrderObject) SetLegs(v []OrderObject) {
	o.Legs = v
}

// GetTrailPrice returns the TrailPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderObject) GetTrailPrice() float64 {
	if o == nil || o.TrailPrice.Get() == nil {
		var ret float64
		return ret
	}
	return *o.TrailPrice.Get()
}

// GetTrailPriceOk returns a tuple with the TrailPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderObject) GetTrailPriceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TrailPrice.Get(), o.TrailPrice.IsSet()
}

// HasTrailPrice returns a boolean if a field has been set.
func (o *OrderObject) HasTrailPrice() bool {
	if o != nil && o.TrailPrice.IsSet() {
		return true
	}

	return false
}

// SetTrailPrice gets a reference to the given NullableFloat64 and assigns it to the TrailPrice field.
func (o *OrderObject) SetTrailPrice(v float64) {
	o.TrailPrice.Set(&v)
}
// SetTrailPriceNil sets the value for TrailPrice to be an explicit nil
func (o *OrderObject) SetTrailPriceNil() {
	o.TrailPrice.Set(nil)
}

// UnsetTrailPrice ensures that no value is present for TrailPrice, not even an explicit nil
func (o *OrderObject) UnsetTrailPrice() {
	o.TrailPrice.Unset()
}

// GetTrailPercent returns the TrailPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderObject) GetTrailPercent() float64 {
	if o == nil || o.TrailPercent.Get() == nil {
		var ret float64
		return ret
	}
	return *o.TrailPercent.Get()
}

// GetTrailPercentOk returns a tuple with the TrailPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderObject) GetTrailPercentOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TrailPercent.Get(), o.TrailPercent.IsSet()
}

// HasTrailPercent returns a boolean if a field has been set.
func (o *OrderObject) HasTrailPercent() bool {
	if o != nil && o.TrailPercent.IsSet() {
		return true
	}

	return false
}

// SetTrailPercent gets a reference to the given NullableFloat64 and assigns it to the TrailPercent field.
func (o *OrderObject) SetTrailPercent(v float64) {
	o.TrailPercent.Set(&v)
}
// SetTrailPercentNil sets the value for TrailPercent to be an explicit nil
func (o *OrderObject) SetTrailPercentNil() {
	o.TrailPercent.Set(nil)
}

// UnsetTrailPercent ensures that no value is present for TrailPercent, not even an explicit nil
func (o *OrderObject) UnsetTrailPercent() {
	o.TrailPercent.Unset()
}

// GetHwm returns the Hwm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderObject) GetHwm() float64 {
	if o == nil || o.Hwm.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Hwm.Get()
}

// GetHwmOk returns a tuple with the Hwm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderObject) GetHwmOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Hwm.Get(), o.Hwm.IsSet()
}

// HasHwm returns a boolean if a field has been set.
func (o *OrderObject) HasHwm() bool {
	if o != nil && o.Hwm.IsSet() {
		return true
	}

	return false
}

// SetHwm gets a reference to the given NullableFloat64 and assigns it to the Hwm field.
func (o *OrderObject) SetHwm(v float64) {
	o.Hwm.Set(&v)
}
// SetHwmNil sets the value for Hwm to be an explicit nil
func (o *OrderObject) SetHwmNil() {
	o.Hwm.Set(nil)
}

// UnsetHwm ensures that no value is present for Hwm, not even an explicit nil
func (o *OrderObject) UnsetHwm() {
	o.Hwm.Unset()
}

// GetCommission returns the Commission field value if set, zero value otherwise.
func (o *OrderObject) GetCommission() float64 {
	if o == nil || o.Commission == nil {
		var ret float64
		return ret
	}
	return *o.Commission
}

// GetCommissionOk returns a tuple with the Commission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderObject) GetCommissionOk() (*float64, bool) {
	if o == nil || o.Commission == nil {
		return nil, false
	}
	return o.Commission, true
}

// HasCommission returns a boolean if a field has been set.
func (o *OrderObject) HasCommission() bool {
	if o != nil && o.Commission != nil {
		return true
	}

	return false
}

// SetCommission gets a reference to the given float64 and assigns it to the Commission field.
func (o *OrderObject) SetCommission(v float64) {
	o.Commission = &v
}

func (o OrderObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ClientOrderId != nil {
		toSerialize["client_order_id"] = o.ClientOrderId
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.SubmittedAt != nil {
		toSerialize["submitted_at"] = o.SubmittedAt
	}
	if o.FilledAt.IsSet() {
		toSerialize["filled_at"] = o.FilledAt.Get()
	}
	if o.ExpiredAt.IsSet() {
		toSerialize["expired_at"] = o.ExpiredAt.Get()
	}
	if o.CanceledAt.IsSet() {
		toSerialize["canceled_at"] = o.CanceledAt.Get()
	}
	if o.FailedAt.IsSet() {
		toSerialize["failed_at"] = o.FailedAt.Get()
	}
	if o.ReplacedAt.IsSet() {
		toSerialize["replaced_at"] = o.ReplacedAt.Get()
	}
	if o.ReplacedBy.IsSet() {
		toSerialize["replaced_by"] = o.ReplacedBy.Get()
	}
	if o.Replaces.IsSet() {
		toSerialize["replaces"] = o.Replaces.Get()
	}
	if o.AssetId != nil {
		toSerialize["asset_id"] = o.AssetId
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.AssetClass != nil {
		toSerialize["asset_class"] = o.AssetClass
	}
	if o.Notional.IsSet() {
		toSerialize["notional"] = o.Notional.Get()
	}
	if o.Qty.IsSet() {
		toSerialize["qty"] = o.Qty.Get()
	}
	if o.FilledQty != nil {
		toSerialize["filled_qty"] = o.FilledQty
	}
	if o.FilledAvgPrice.IsSet() {
		toSerialize["filled_avg_price"] = o.FilledAvgPrice.Get()
	}
	if o.OrderClass != nil {
		toSerialize["order_class"] = o.OrderClass
	}
	if o.OrderType != nil {
		toSerialize["order_type"] = o.OrderType
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Side != nil {
		toSerialize["side"] = o.Side
	}
	if o.TimeInForce != nil {
		toSerialize["time_in_force"] = o.TimeInForce
	}
	if o.LimitPrice.IsSet() {
		toSerialize["limit_price"] = o.LimitPrice.Get()
	}
	if o.StopPrice.IsSet() {
		toSerialize["stop_price"] = o.StopPrice.Get()
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.ExtendedHours != nil {
		toSerialize["extended_hours"] = o.ExtendedHours
	}
	if o.Legs != nil {
		toSerialize["legs"] = o.Legs
	}
	if o.TrailPrice.IsSet() {
		toSerialize["trail_price"] = o.TrailPrice.Get()
	}
	if o.TrailPercent.IsSet() {
		toSerialize["trail_percent"] = o.TrailPercent.Get()
	}
	if o.Hwm.IsSet() {
		toSerialize["hwm"] = o.Hwm.Get()
	}
	if o.Commission != nil {
		toSerialize["commission"] = o.Commission
	}
	return json.Marshal(toSerialize)
}

type NullableOrderObject struct {
	value *OrderObject
	isSet bool
}

func (v NullableOrderObject) Get() *OrderObject {
	return v.value
}

func (v *NullableOrderObject) Set(val *OrderObject) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderObject) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderObject(val *OrderObject) *NullableOrderObject {
	return &NullableOrderObject{value: val, isSet: true}
}

func (v NullableOrderObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


