/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MarketDay struct for MarketDay
type MarketDay struct {
	Date string `json:"date"`
	Open string `json:"open"`
	Close string `json:"close"`
	SessionOpen *string `json:"session_open,omitempty"`
	SessionClose *string `json:"session_close,omitempty"`
}

// NewMarketDay instantiates a new MarketDay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketDay(date string, open string, close string) *MarketDay {
	this := MarketDay{}
	this.Date = date
	this.Open = open
	this.Close = close
	return &this
}

// NewMarketDayWithDefaults instantiates a new MarketDay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketDayWithDefaults() *MarketDay {
	this := MarketDay{}
	return &this
}

// GetDate returns the Date field value
func (o *MarketDay) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *MarketDay) GetDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *MarketDay) SetDate(v string) {
	o.Date = v
}

// GetOpen returns the Open field value
func (o *MarketDay) GetOpen() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Open
}

// GetOpenOk returns a tuple with the Open field value
// and a boolean to check if the value has been set.
func (o *MarketDay) GetOpenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Open, true
}

// SetOpen sets field value
func (o *MarketDay) SetOpen(v string) {
	o.Open = v
}

// GetClose returns the Close field value
func (o *MarketDay) GetClose() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Close
}

// GetCloseOk returns a tuple with the Close field value
// and a boolean to check if the value has been set.
func (o *MarketDay) GetCloseOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Close, true
}

// SetClose sets field value
func (o *MarketDay) SetClose(v string) {
	o.Close = v
}

// GetSessionOpen returns the SessionOpen field value if set, zero value otherwise.
func (o *MarketDay) GetSessionOpen() string {
	if o == nil || o.SessionOpen == nil {
		var ret string
		return ret
	}
	return *o.SessionOpen
}

// GetSessionOpenOk returns a tuple with the SessionOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketDay) GetSessionOpenOk() (*string, bool) {
	if o == nil || o.SessionOpen == nil {
		return nil, false
	}
	return o.SessionOpen, true
}

// HasSessionOpen returns a boolean if a field has been set.
func (o *MarketDay) HasSessionOpen() bool {
	if o != nil && o.SessionOpen != nil {
		return true
	}

	return false
}

// SetSessionOpen gets a reference to the given string and assigns it to the SessionOpen field.
func (o *MarketDay) SetSessionOpen(v string) {
	o.SessionOpen = &v
}

// GetSessionClose returns the SessionClose field value if set, zero value otherwise.
func (o *MarketDay) GetSessionClose() string {
	if o == nil || o.SessionClose == nil {
		var ret string
		return ret
	}
	return *o.SessionClose
}

// GetSessionCloseOk returns a tuple with the SessionClose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketDay) GetSessionCloseOk() (*string, bool) {
	if o == nil || o.SessionClose == nil {
		return nil, false
	}
	return o.SessionClose, true
}

// HasSessionClose returns a boolean if a field has been set.
func (o *MarketDay) HasSessionClose() bool {
	if o != nil && o.SessionClose != nil {
		return true
	}

	return false
}

// SetSessionClose gets a reference to the given string and assigns it to the SessionClose field.
func (o *MarketDay) SetSessionClose(v string) {
	o.SessionClose = &v
}

func (o MarketDay) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["open"] = o.Open
	}
	if true {
		toSerialize["close"] = o.Close
	}
	if o.SessionOpen != nil {
		toSerialize["session_open"] = o.SessionOpen
	}
	if o.SessionClose != nil {
		toSerialize["session_close"] = o.SessionClose
	}
	return json.Marshal(toSerialize)
}

type NullableMarketDay struct {
	value *MarketDay
	isSet bool
}

func (v NullableMarketDay) Get() *MarketDay {
	return v.value
}

func (v *NullableMarketDay) Set(val *MarketDay) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketDay) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketDay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketDay(val *MarketDay) *NullableMarketDay {
	return &NullableMarketDay{value: val, isSet: true}
}

func (v NullableMarketDay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketDay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


