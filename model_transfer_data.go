/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransferData struct for TransferData
type TransferData struct {
	TransferType string `json:"transfer_type"`
	Timing *string `json:"timing,omitempty"`
	Amount float64 `json:"amount"`
	Direction string `json:"direction"`
	RelationshipId string `json:"relationship_id"`
	AdditionalInformation *string `json:"additional_information,omitempty"`
	BankId string `json:"bank_id"`
}

// NewTransferData instantiates a new TransferData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferData(transferType string, amount float64, direction string, relationshipId string, bankId string) *TransferData {
	this := TransferData{}
	this.TransferType = transferType
	this.Amount = amount
	this.Direction = direction
	this.RelationshipId = relationshipId
	this.BankId = bankId
	return &this
}

// NewTransferDataWithDefaults instantiates a new TransferData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferDataWithDefaults() *TransferData {
	this := TransferData{}
	return &this
}

// GetTransferType returns the TransferType field value
func (o *TransferData) GetTransferType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransferType
}

// GetTransferTypeOk returns a tuple with the TransferType field value
// and a boolean to check if the value has been set.
func (o *TransferData) GetTransferTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TransferType, true
}

// SetTransferType sets field value
func (o *TransferData) SetTransferType(v string) {
	o.TransferType = v
}

// GetTiming returns the Timing field value if set, zero value otherwise.
func (o *TransferData) GetTiming() string {
	if o == nil || o.Timing == nil {
		var ret string
		return ret
	}
	return *o.Timing
}

// GetTimingOk returns a tuple with the Timing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetTimingOk() (*string, bool) {
	if o == nil || o.Timing == nil {
		return nil, false
	}
	return o.Timing, true
}

// HasTiming returns a boolean if a field has been set.
func (o *TransferData) HasTiming() bool {
	if o != nil && o.Timing != nil {
		return true
	}

	return false
}

// SetTiming gets a reference to the given string and assigns it to the Timing field.
func (o *TransferData) SetTiming(v string) {
	o.Timing = &v
}

// GetAmount returns the Amount field value
func (o *TransferData) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransferData) GetAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransferData) SetAmount(v float64) {
	o.Amount = v
}

// GetDirection returns the Direction field value
func (o *TransferData) GetDirection() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value
// and a boolean to check if the value has been set.
func (o *TransferData) GetDirectionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Direction, true
}

// SetDirection sets field value
func (o *TransferData) SetDirection(v string) {
	o.Direction = v
}

// GetRelationshipId returns the RelationshipId field value
func (o *TransferData) GetRelationshipId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RelationshipId
}

// GetRelationshipIdOk returns a tuple with the RelationshipId field value
// and a boolean to check if the value has been set.
func (o *TransferData) GetRelationshipIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RelationshipId, true
}

// SetRelationshipId sets field value
func (o *TransferData) SetRelationshipId(v string) {
	o.RelationshipId = v
}

// GetAdditionalInformation returns the AdditionalInformation field value if set, zero value otherwise.
func (o *TransferData) GetAdditionalInformation() string {
	if o == nil || o.AdditionalInformation == nil {
		var ret string
		return ret
	}
	return *o.AdditionalInformation
}

// GetAdditionalInformationOk returns a tuple with the AdditionalInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetAdditionalInformationOk() (*string, bool) {
	if o == nil || o.AdditionalInformation == nil {
		return nil, false
	}
	return o.AdditionalInformation, true
}

// HasAdditionalInformation returns a boolean if a field has been set.
func (o *TransferData) HasAdditionalInformation() bool {
	if o != nil && o.AdditionalInformation != nil {
		return true
	}

	return false
}

// SetAdditionalInformation gets a reference to the given string and assigns it to the AdditionalInformation field.
func (o *TransferData) SetAdditionalInformation(v string) {
	o.AdditionalInformation = &v
}

// GetBankId returns the BankId field value
func (o *TransferData) GetBankId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BankId
}

// GetBankIdOk returns a tuple with the BankId field value
// and a boolean to check if the value has been set.
func (o *TransferData) GetBankIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BankId, true
}

// SetBankId sets field value
func (o *TransferData) SetBankId(v string) {
	o.BankId = v
}

func (o TransferData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["transfer_type"] = o.TransferType
	}
	if o.Timing != nil {
		toSerialize["timing"] = o.Timing
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["direction"] = o.Direction
	}
	if true {
		toSerialize["relationship_id"] = o.RelationshipId
	}
	if o.AdditionalInformation != nil {
		toSerialize["additional_information"] = o.AdditionalInformation
	}
	if true {
		toSerialize["bank_id"] = o.BankId
	}
	return json.Marshal(toSerialize)
}

type NullableTransferData struct {
	value *TransferData
	isSet bool
}

func (v NullableTransferData) Get() *TransferData {
	return v.value
}

func (v *NullableTransferData) Set(val *TransferData) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferData) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferData(val *TransferData) *NullableTransferData {
	return &NullableTransferData{value: val, isSet: true}
}

func (v NullableTransferData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


