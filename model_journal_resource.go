/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// JournalResource - struct for JournalResource
type JournalResource struct {
	JNLC *JNLC
	JNLS *JNLS
}

// JNLCAsJournalResource is a convenience function that returns JNLC wrapped in JournalResource
func JNLCAsJournalResource(v *JNLC) JournalResource {
	return JournalResource{ JNLC: v}
}

// JNLSAsJournalResource is a convenience function that returns JNLS wrapped in JournalResource
func JNLSAsJournalResource(v *JNLS) JournalResource {
	return JournalResource{ JNLS: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *JournalResource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into JNLC
	err = json.Unmarshal(data, &dst.JNLC)
	if err == nil {
		jsonJNLC, _ := json.Marshal(dst.JNLC)
		if string(jsonJNLC) == "{}" { // empty struct
			dst.JNLC = nil
		} else {
			match++
		}
	} else {
		dst.JNLC = nil
	}

	// try to unmarshal data into JNLS
	err = json.Unmarshal(data, &dst.JNLS)
	if err == nil {
		jsonJNLS, _ := json.Marshal(dst.JNLS)
		if string(jsonJNLS) == "{}" { // empty struct
			dst.JNLS = nil
		} else {
			match++
		}
	} else {
		dst.JNLS = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.JNLC = nil
		dst.JNLS = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(JournalResource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(JournalResource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src JournalResource) MarshalJSON() ([]byte, error) {
	if src.JNLC != nil {
		return json.Marshal(&src.JNLC)
	}

	if src.JNLS != nil {
		return json.Marshal(&src.JNLS)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *JournalResource) GetActualInstance() (interface{}) {
	if obj.JNLC != nil {
		return obj.JNLC
	}

	if obj.JNLS != nil {
		return obj.JNLS
	}

	// all schemas are nil
	return nil
}

type NullableJournalResource struct {
	value *JournalResource
	isSet bool
}

func (v NullableJournalResource) Get() *JournalResource {
	return v.value
}

func (v *NullableJournalResource) Set(val *JournalResource) {
	v.value = val
	v.isSet = true
}

func (v NullableJournalResource) IsSet() bool {
	return v.isSet
}

func (v *NullableJournalResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJournalResource(val *JournalResource) *NullableJournalResource {
	return &NullableJournalResource{value: val, isSet: true}
}

func (v NullableJournalResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJournalResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


