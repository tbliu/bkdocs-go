/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AccountStatus - **SUBMITTED** The application has been submitted and in process. - **ACTION_REQUIRED** The application requires manual action. - **APPROVAL_PENDING** Initial value. The application approval process is in process. - **APPROVED** The account application has been approved, and waiting to be ACTIVE - **REJECTED** The account application is rejected for some reason - **ACTIVE** The account is fully active. Trading and funding are processed under this status. - **DISABLED** The account is disabled after ACTIVE status. - **ACCOUNT_CLOSED** The account is closed. 
type AccountStatus string

// List of AccountStatus
const (
	ACCOUNTSTATUS_SUBMITTED AccountStatus = "SUBMITTED"
	ACCOUNTSTATUS_ACTION_REQUIRED AccountStatus = "ACTION_REQUIRED"
	ACCOUNTSTATUS_APPROVAL_PENDING AccountStatus = "APPROVAL_PENDING"
	ACCOUNTSTATUS_APPROVED AccountStatus = "APPROVED"
	ACCOUNTSTATUS_REJECTED AccountStatus = "REJECTED"
	ACCOUNTSTATUS_ACTIVE AccountStatus = "ACTIVE"
	ACCOUNTSTATUS_DISABLED AccountStatus = "DISABLED"
	ACCOUNTSTATUS_ACCOUNT_CLOSED AccountStatus = "ACCOUNT_CLOSED"
)

var allowedAccountStatusEnumValues = []AccountStatus{
	"SUBMITTED",
	"ACTION_REQUIRED",
	"APPROVAL_PENDING",
	"APPROVED",
	"REJECTED",
	"ACTIVE",
	"DISABLED",
	"ACCOUNT_CLOSED",
}

func (v *AccountStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountStatus(value)
	for _, existing := range allowedAccountStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountStatus", value)
}

// NewAccountStatusFromValue returns a pointer to a valid AccountStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountStatusFromValue(v string) (*AccountStatus, error) {
	ev := AccountStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountStatus: valid values are %v", v, allowedAccountStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountStatus) IsValid() bool {
	for _, existing := range allowedAccountStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountStatus value
func (v AccountStatus) Ptr() *AccountStatus {
	return &v
}

type NullableAccountStatus struct {
	value *AccountStatus
	isSet bool
}

func (v NullableAccountStatus) Get() *AccountStatus {
	return v.value
}

func (v *NullableAccountStatus) Set(val *AccountStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountStatus(val *AccountStatus) *NullableAccountStatus {
	return &NullableAccountStatus{value: val, isSet: true}
}

func (v NullableAccountStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

