/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// EventsApiService EventsApi service
type EventsApiService service

type EventsApiApiEventsAccountsStatusGetRequest struct {
	ctx _context.Context
	ApiService *EventsApiService
	since *time.Time
	until *time.Time
	sinceId *int32
	untilId *int32
}

func (r EventsApiApiEventsAccountsStatusGetRequest) Since(since time.Time) EventsApiApiEventsAccountsStatusGetRequest {
	r.since = &since
	return r
}
func (r EventsApiApiEventsAccountsStatusGetRequest) Until(until time.Time) EventsApiApiEventsAccountsStatusGetRequest {
	r.until = &until
	return r
}
func (r EventsApiApiEventsAccountsStatusGetRequest) SinceId(sinceId int32) EventsApiApiEventsAccountsStatusGetRequest {
	r.sinceId = &sinceId
	return r
}
func (r EventsApiApiEventsAccountsStatusGetRequest) UntilId(untilId int32) EventsApiApiEventsAccountsStatusGetRequest {
	r.untilId = &untilId
	return r
}

func (r EventsApiApiEventsAccountsStatusGetRequest) Execute() (AccountStatusEvent, *_nethttp.Response, error) {
	return r.ApiService.EventsAccountsStatusGetExecute(r)
}

/*
EventsAccountsStatusGet Subscribe to account status events (SSE).

Query Params Rules:
- `since` required if `until` specified
- `since_id` required if `until_id` specified
- `since` and `since_id` can’t be used at the same time
Behavior:
- if `since` or `since_id` not specified this will not return any historic data
- if `until` or `until_id` reached stream will end (status 200)


 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EventsApiApiEventsAccountsStatusGetRequest
*/
func (a *EventsApiService) EventsAccountsStatusGet(ctx _context.Context) EventsApiApiEventsAccountsStatusGetRequest {
	return EventsApiApiEventsAccountsStatusGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountStatusEvent
func (a *EventsApiService) EventsAccountsStatusGetExecute(r EventsApiApiEventsAccountsStatusGetRequest) (AccountStatusEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AccountStatusEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsApiService.EventsAccountsStatusGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events/accounts/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.since != nil {
		localVarQueryParams.Add("since", parameterToString(*r.since, ""))
	}
	if r.until != nil {
		localVarQueryParams.Add("until", parameterToString(*r.until, ""))
	}
	if r.sinceId != nil {
		localVarQueryParams.Add("since_id", parameterToString(*r.sinceId, ""))
	}
	if r.untilId != nil {
		localVarQueryParams.Add("until_id", parameterToString(*r.untilId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EventsApiApiEventsJournalsStatusGetRequest struct {
	ctx _context.Context
	ApiService *EventsApiService
	since *time.Time
	until *time.Time
	sinceId *int32
	untilId *int32
}

func (r EventsApiApiEventsJournalsStatusGetRequest) Since(since time.Time) EventsApiApiEventsJournalsStatusGetRequest {
	r.since = &since
	return r
}
func (r EventsApiApiEventsJournalsStatusGetRequest) Until(until time.Time) EventsApiApiEventsJournalsStatusGetRequest {
	r.until = &until
	return r
}
func (r EventsApiApiEventsJournalsStatusGetRequest) SinceId(sinceId int32) EventsApiApiEventsJournalsStatusGetRequest {
	r.sinceId = &sinceId
	return r
}
func (r EventsApiApiEventsJournalsStatusGetRequest) UntilId(untilId int32) EventsApiApiEventsJournalsStatusGetRequest {
	r.untilId = &untilId
	return r
}

func (r EventsApiApiEventsJournalsStatusGetRequest) Execute() (InlineResponse2001, *_nethttp.Response, error) {
	return r.ApiService.EventsJournalsStatusGetExecute(r)
}

/*
EventsJournalsStatusGet Subscribe to journal events (SSE).

Query Params Rules:
- `since` required if `until` specified
- `since_id` required if `until_id` specified
- `since` and `since_id` can’t be used at the same time
Behavior:
- if `since` or `since_id` not specified this will not return any historic data
- if `until` or `until_id` reached stream will end (status 200)


 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EventsApiApiEventsJournalsStatusGetRequest
*/
func (a *EventsApiService) EventsJournalsStatusGet(ctx _context.Context) EventsApiApiEventsJournalsStatusGetRequest {
	return EventsApiApiEventsJournalsStatusGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InlineResponse2001
func (a *EventsApiService) EventsJournalsStatusGetExecute(r EventsApiApiEventsJournalsStatusGetRequest) (InlineResponse2001, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2001
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsApiService.EventsJournalsStatusGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events/journals/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.since != nil {
		localVarQueryParams.Add("since", parameterToString(*r.since, ""))
	}
	if r.until != nil {
		localVarQueryParams.Add("until", parameterToString(*r.until, ""))
	}
	if r.sinceId != nil {
		localVarQueryParams.Add("since_id", parameterToString(*r.sinceId, ""))
	}
	if r.untilId != nil {
		localVarQueryParams.Add("until_id", parameterToString(*r.untilId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
