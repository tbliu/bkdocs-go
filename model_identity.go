/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Identity Identity is the model to provide account ownerâ€™s identity information. 
type Identity struct {
	GivenName string `json:"given_name"`
	FamilyName string `json:"family_name"`
	DateOfBirth string `json:"date_of_birth"`
	TaxId *string `json:"tax_id,omitempty"`
	TaxIdType *string `json:"tax_id_type,omitempty"`
	// [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html). 
	CountryOfCitizenship *string `json:"country_of_citizenship,omitempty"`
	// [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html). 
	CountryOfBirth *string `json:"country_of_birth,omitempty"`
	// [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html). 
	CountryOfTaxResidence string `json:"country_of_tax_residence"`
	FundingSource []string `json:"funding_source"`
	AnnualIncomeMin *float32 `json:"annual_income_min,omitempty"`
	AnnualIncomeMax *float32 `json:"annual_income_max,omitempty"`
	LiquidNetWorthMin *float32 `json:"liquid_net_worth_min,omitempty"`
	LiquidNetWorthMax *float32 `json:"liquid_net_worth_max,omitempty"`
	TotalNetWorthMin *float32 `json:"total_net_worth_min,omitempty"`
	TotalNetWorthMax *float32 `json:"total_net_worth_max,omitempty"`
	// any extra information used for KYC purposes 
	Extra *map[string]interface{} `json:"extra,omitempty"`
}

// NewIdentity instantiates a new Identity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentity(givenName string, familyName string, dateOfBirth string, countryOfTaxResidence string, fundingSource []string) *Identity {
	this := Identity{}
	this.GivenName = givenName
	this.FamilyName = familyName
	this.DateOfBirth = dateOfBirth
	this.CountryOfTaxResidence = countryOfTaxResidence
	this.FundingSource = fundingSource
	return &this
}

// NewIdentityWithDefaults instantiates a new Identity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityWithDefaults() *Identity {
	this := Identity{}
	return &this
}

// GetGivenName returns the GivenName field value
func (o *Identity) GetGivenName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GivenName
}

// GetGivenNameOk returns a tuple with the GivenName field value
// and a boolean to check if the value has been set.
func (o *Identity) GetGivenNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GivenName, true
}

// SetGivenName sets field value
func (o *Identity) SetGivenName(v string) {
	o.GivenName = v
}

// GetFamilyName returns the FamilyName field value
func (o *Identity) GetFamilyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FamilyName
}

// GetFamilyNameOk returns a tuple with the FamilyName field value
// and a boolean to check if the value has been set.
func (o *Identity) GetFamilyNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FamilyName, true
}

// SetFamilyName sets field value
func (o *Identity) SetFamilyName(v string) {
	o.FamilyName = v
}

// GetDateOfBirth returns the DateOfBirth field value
func (o *Identity) GetDateOfBirth() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value
// and a boolean to check if the value has been set.
func (o *Identity) GetDateOfBirthOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DateOfBirth, true
}

// SetDateOfBirth sets field value
func (o *Identity) SetDateOfBirth(v string) {
	o.DateOfBirth = v
}

// GetTaxId returns the TaxId field value if set, zero value otherwise.
func (o *Identity) GetTaxId() string {
	if o == nil || o.TaxId == nil {
		var ret string
		return ret
	}
	return *o.TaxId
}

// GetTaxIdOk returns a tuple with the TaxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetTaxIdOk() (*string, bool) {
	if o == nil || o.TaxId == nil {
		return nil, false
	}
	return o.TaxId, true
}

// HasTaxId returns a boolean if a field has been set.
func (o *Identity) HasTaxId() bool {
	if o != nil && o.TaxId != nil {
		return true
	}

	return false
}

// SetTaxId gets a reference to the given string and assigns it to the TaxId field.
func (o *Identity) SetTaxId(v string) {
	o.TaxId = &v
}

// GetTaxIdType returns the TaxIdType field value if set, zero value otherwise.
func (o *Identity) GetTaxIdType() string {
	if o == nil || o.TaxIdType == nil {
		var ret string
		return ret
	}
	return *o.TaxIdType
}

// GetTaxIdTypeOk returns a tuple with the TaxIdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetTaxIdTypeOk() (*string, bool) {
	if o == nil || o.TaxIdType == nil {
		return nil, false
	}
	return o.TaxIdType, true
}

// HasTaxIdType returns a boolean if a field has been set.
func (o *Identity) HasTaxIdType() bool {
	if o != nil && o.TaxIdType != nil {
		return true
	}

	return false
}

// SetTaxIdType gets a reference to the given string and assigns it to the TaxIdType field.
func (o *Identity) SetTaxIdType(v string) {
	o.TaxIdType = &v
}

// GetCountryOfCitizenship returns the CountryOfCitizenship field value if set, zero value otherwise.
func (o *Identity) GetCountryOfCitizenship() string {
	if o == nil || o.CountryOfCitizenship == nil {
		var ret string
		return ret
	}
	return *o.CountryOfCitizenship
}

// GetCountryOfCitizenshipOk returns a tuple with the CountryOfCitizenship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetCountryOfCitizenshipOk() (*string, bool) {
	if o == nil || o.CountryOfCitizenship == nil {
		return nil, false
	}
	return o.CountryOfCitizenship, true
}

// HasCountryOfCitizenship returns a boolean if a field has been set.
func (o *Identity) HasCountryOfCitizenship() bool {
	if o != nil && o.CountryOfCitizenship != nil {
		return true
	}

	return false
}

// SetCountryOfCitizenship gets a reference to the given string and assigns it to the CountryOfCitizenship field.
func (o *Identity) SetCountryOfCitizenship(v string) {
	o.CountryOfCitizenship = &v
}

// GetCountryOfBirth returns the CountryOfBirth field value if set, zero value otherwise.
func (o *Identity) GetCountryOfBirth() string {
	if o == nil || o.CountryOfBirth == nil {
		var ret string
		return ret
	}
	return *o.CountryOfBirth
}

// GetCountryOfBirthOk returns a tuple with the CountryOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetCountryOfBirthOk() (*string, bool) {
	if o == nil || o.CountryOfBirth == nil {
		return nil, false
	}
	return o.CountryOfBirth, true
}

// HasCountryOfBirth returns a boolean if a field has been set.
func (o *Identity) HasCountryOfBirth() bool {
	if o != nil && o.CountryOfBirth != nil {
		return true
	}

	return false
}

// SetCountryOfBirth gets a reference to the given string and assigns it to the CountryOfBirth field.
func (o *Identity) SetCountryOfBirth(v string) {
	o.CountryOfBirth = &v
}

// GetCountryOfTaxResidence returns the CountryOfTaxResidence field value
func (o *Identity) GetCountryOfTaxResidence() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryOfTaxResidence
}

// GetCountryOfTaxResidenceOk returns a tuple with the CountryOfTaxResidence field value
// and a boolean to check if the value has been set.
func (o *Identity) GetCountryOfTaxResidenceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CountryOfTaxResidence, true
}

// SetCountryOfTaxResidence sets field value
func (o *Identity) SetCountryOfTaxResidence(v string) {
	o.CountryOfTaxResidence = v
}

// GetFundingSource returns the FundingSource field value
func (o *Identity) GetFundingSource() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FundingSource
}

// GetFundingSourceOk returns a tuple with the FundingSource field value
// and a boolean to check if the value has been set.
func (o *Identity) GetFundingSourceOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FundingSource, true
}

// SetFundingSource sets field value
func (o *Identity) SetFundingSource(v []string) {
	o.FundingSource = v
}

// GetAnnualIncomeMin returns the AnnualIncomeMin field value if set, zero value otherwise.
func (o *Identity) GetAnnualIncomeMin() float32 {
	if o == nil || o.AnnualIncomeMin == nil {
		var ret float32
		return ret
	}
	return *o.AnnualIncomeMin
}

// GetAnnualIncomeMinOk returns a tuple with the AnnualIncomeMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetAnnualIncomeMinOk() (*float32, bool) {
	if o == nil || o.AnnualIncomeMin == nil {
		return nil, false
	}
	return o.AnnualIncomeMin, true
}

// HasAnnualIncomeMin returns a boolean if a field has been set.
func (o *Identity) HasAnnualIncomeMin() bool {
	if o != nil && o.AnnualIncomeMin != nil {
		return true
	}

	return false
}

// SetAnnualIncomeMin gets a reference to the given float32 and assigns it to the AnnualIncomeMin field.
func (o *Identity) SetAnnualIncomeMin(v float32) {
	o.AnnualIncomeMin = &v
}

// GetAnnualIncomeMax returns the AnnualIncomeMax field value if set, zero value otherwise.
func (o *Identity) GetAnnualIncomeMax() float32 {
	if o == nil || o.AnnualIncomeMax == nil {
		var ret float32
		return ret
	}
	return *o.AnnualIncomeMax
}

// GetAnnualIncomeMaxOk returns a tuple with the AnnualIncomeMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetAnnualIncomeMaxOk() (*float32, bool) {
	if o == nil || o.AnnualIncomeMax == nil {
		return nil, false
	}
	return o.AnnualIncomeMax, true
}

// HasAnnualIncomeMax returns a boolean if a field has been set.
func (o *Identity) HasAnnualIncomeMax() bool {
	if o != nil && o.AnnualIncomeMax != nil {
		return true
	}

	return false
}

// SetAnnualIncomeMax gets a reference to the given float32 and assigns it to the AnnualIncomeMax field.
func (o *Identity) SetAnnualIncomeMax(v float32) {
	o.AnnualIncomeMax = &v
}

// GetLiquidNetWorthMin returns the LiquidNetWorthMin field value if set, zero value otherwise.
func (o *Identity) GetLiquidNetWorthMin() float32 {
	if o == nil || o.LiquidNetWorthMin == nil {
		var ret float32
		return ret
	}
	return *o.LiquidNetWorthMin
}

// GetLiquidNetWorthMinOk returns a tuple with the LiquidNetWorthMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetLiquidNetWorthMinOk() (*float32, bool) {
	if o == nil || o.LiquidNetWorthMin == nil {
		return nil, false
	}
	return o.LiquidNetWorthMin, true
}

// HasLiquidNetWorthMin returns a boolean if a field has been set.
func (o *Identity) HasLiquidNetWorthMin() bool {
	if o != nil && o.LiquidNetWorthMin != nil {
		return true
	}

	return false
}

// SetLiquidNetWorthMin gets a reference to the given float32 and assigns it to the LiquidNetWorthMin field.
func (o *Identity) SetLiquidNetWorthMin(v float32) {
	o.LiquidNetWorthMin = &v
}

// GetLiquidNetWorthMax returns the LiquidNetWorthMax field value if set, zero value otherwise.
func (o *Identity) GetLiquidNetWorthMax() float32 {
	if o == nil || o.LiquidNetWorthMax == nil {
		var ret float32
		return ret
	}
	return *o.LiquidNetWorthMax
}

// GetLiquidNetWorthMaxOk returns a tuple with the LiquidNetWorthMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetLiquidNetWorthMaxOk() (*float32, bool) {
	if o == nil || o.LiquidNetWorthMax == nil {
		return nil, false
	}
	return o.LiquidNetWorthMax, true
}

// HasLiquidNetWorthMax returns a boolean if a field has been set.
func (o *Identity) HasLiquidNetWorthMax() bool {
	if o != nil && o.LiquidNetWorthMax != nil {
		return true
	}

	return false
}

// SetLiquidNetWorthMax gets a reference to the given float32 and assigns it to the LiquidNetWorthMax field.
func (o *Identity) SetLiquidNetWorthMax(v float32) {
	o.LiquidNetWorthMax = &v
}

// GetTotalNetWorthMin returns the TotalNetWorthMin field value if set, zero value otherwise.
func (o *Identity) GetTotalNetWorthMin() float32 {
	if o == nil || o.TotalNetWorthMin == nil {
		var ret float32
		return ret
	}
	return *o.TotalNetWorthMin
}

// GetTotalNetWorthMinOk returns a tuple with the TotalNetWorthMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetTotalNetWorthMinOk() (*float32, bool) {
	if o == nil || o.TotalNetWorthMin == nil {
		return nil, false
	}
	return o.TotalNetWorthMin, true
}

// HasTotalNetWorthMin returns a boolean if a field has been set.
func (o *Identity) HasTotalNetWorthMin() bool {
	if o != nil && o.TotalNetWorthMin != nil {
		return true
	}

	return false
}

// SetTotalNetWorthMin gets a reference to the given float32 and assigns it to the TotalNetWorthMin field.
func (o *Identity) SetTotalNetWorthMin(v float32) {
	o.TotalNetWorthMin = &v
}

// GetTotalNetWorthMax returns the TotalNetWorthMax field value if set, zero value otherwise.
func (o *Identity) GetTotalNetWorthMax() float32 {
	if o == nil || o.TotalNetWorthMax == nil {
		var ret float32
		return ret
	}
	return *o.TotalNetWorthMax
}

// GetTotalNetWorthMaxOk returns a tuple with the TotalNetWorthMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetTotalNetWorthMaxOk() (*float32, bool) {
	if o == nil || o.TotalNetWorthMax == nil {
		return nil, false
	}
	return o.TotalNetWorthMax, true
}

// HasTotalNetWorthMax returns a boolean if a field has been set.
func (o *Identity) HasTotalNetWorthMax() bool {
	if o != nil && o.TotalNetWorthMax != nil {
		return true
	}

	return false
}

// SetTotalNetWorthMax gets a reference to the given float32 and assigns it to the TotalNetWorthMax field.
func (o *Identity) SetTotalNetWorthMax(v float32) {
	o.TotalNetWorthMax = &v
}

// GetExtra returns the Extra field value if set, zero value otherwise.
func (o *Identity) GetExtra() map[string]interface{} {
	if o == nil || o.Extra == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Extra
}

// GetExtraOk returns a tuple with the Extra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetExtraOk() (*map[string]interface{}, bool) {
	if o == nil || o.Extra == nil {
		return nil, false
	}
	return o.Extra, true
}

// HasExtra returns a boolean if a field has been set.
func (o *Identity) HasExtra() bool {
	if o != nil && o.Extra != nil {
		return true
	}

	return false
}

// SetExtra gets a reference to the given map[string]interface{} and assigns it to the Extra field.
func (o *Identity) SetExtra(v map[string]interface{}) {
	o.Extra = &v
}

func (o Identity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["given_name"] = o.GivenName
	}
	if true {
		toSerialize["family_name"] = o.FamilyName
	}
	if true {
		toSerialize["date_of_birth"] = o.DateOfBirth
	}
	if o.TaxId != nil {
		toSerialize["tax_id"] = o.TaxId
	}
	if o.TaxIdType != nil {
		toSerialize["tax_id_type"] = o.TaxIdType
	}
	if o.CountryOfCitizenship != nil {
		toSerialize["country_of_citizenship"] = o.CountryOfCitizenship
	}
	if o.CountryOfBirth != nil {
		toSerialize["country_of_birth"] = o.CountryOfBirth
	}
	if true {
		toSerialize["country_of_tax_residence"] = o.CountryOfTaxResidence
	}
	if true {
		toSerialize["funding_source"] = o.FundingSource
	}
	if o.AnnualIncomeMin != nil {
		toSerialize["annual_income_min"] = o.AnnualIncomeMin
	}
	if o.AnnualIncomeMax != nil {
		toSerialize["annual_income_max"] = o.AnnualIncomeMax
	}
	if o.LiquidNetWorthMin != nil {
		toSerialize["liquid_net_worth_min"] = o.LiquidNetWorthMin
	}
	if o.LiquidNetWorthMax != nil {
		toSerialize["liquid_net_worth_max"] = o.LiquidNetWorthMax
	}
	if o.TotalNetWorthMin != nil {
		toSerialize["total_net_worth_min"] = o.TotalNetWorthMin
	}
	if o.TotalNetWorthMax != nil {
		toSerialize["total_net_worth_max"] = o.TotalNetWorthMax
	}
	if o.Extra != nil {
		toSerialize["extra"] = o.Extra
	}
	return json.Marshal(toSerialize)
}

type NullableIdentity struct {
	value *Identity
	isSet bool
}

func (v NullableIdentity) Get() *Identity {
	return v.value
}

func (v *NullableIdentity) Set(val *Identity) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentity(val *Identity) *NullableIdentity {
	return &NullableIdentity{value: val, isSet: true}
}

func (v NullableIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


