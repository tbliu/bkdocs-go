/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// JournalData struct for JournalData
type JournalData struct {
	EntryType string `json:"entry_type"`
	FromAccount string `json:"from_account"`
	ToAccount string `json:"to_account"`
	// Required for JNLC. The dollar amount to move. It has to be a positive value. 
	Amount *float64 `json:"amount,omitempty"`
	// Required for JNLS. 
	Symbol *string `json:"symbol,omitempty"`
	// Required for JNLS. The number of shares to move. It has to be a positive value. 
	Qty *float64 `json:"qty,omitempty"`
}

// NewJournalData instantiates a new JournalData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJournalData(entryType string, fromAccount string, toAccount string) *JournalData {
	this := JournalData{}
	this.EntryType = entryType
	this.FromAccount = fromAccount
	this.ToAccount = toAccount
	return &this
}

// NewJournalDataWithDefaults instantiates a new JournalData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJournalDataWithDefaults() *JournalData {
	this := JournalData{}
	return &this
}

// GetEntryType returns the EntryType field value
func (o *JournalData) GetEntryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntryType
}

// GetEntryTypeOk returns a tuple with the EntryType field value
// and a boolean to check if the value has been set.
func (o *JournalData) GetEntryTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EntryType, true
}

// SetEntryType sets field value
func (o *JournalData) SetEntryType(v string) {
	o.EntryType = v
}

// GetFromAccount returns the FromAccount field value
func (o *JournalData) GetFromAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromAccount
}

// GetFromAccountOk returns a tuple with the FromAccount field value
// and a boolean to check if the value has been set.
func (o *JournalData) GetFromAccountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FromAccount, true
}

// SetFromAccount sets field value
func (o *JournalData) SetFromAccount(v string) {
	o.FromAccount = v
}

// GetToAccount returns the ToAccount field value
func (o *JournalData) GetToAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToAccount
}

// GetToAccountOk returns a tuple with the ToAccount field value
// and a boolean to check if the value has been set.
func (o *JournalData) GetToAccountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ToAccount, true
}

// SetToAccount sets field value
func (o *JournalData) SetToAccount(v string) {
	o.ToAccount = v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *JournalData) GetAmount() float64 {
	if o == nil || o.Amount == nil {
		var ret float64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JournalData) GetAmountOk() (*float64, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *JournalData) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float64 and assigns it to the Amount field.
func (o *JournalData) SetAmount(v float64) {
	o.Amount = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *JournalData) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JournalData) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *JournalData) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *JournalData) SetSymbol(v string) {
	o.Symbol = &v
}

// GetQty returns the Qty field value if set, zero value otherwise.
func (o *JournalData) GetQty() float64 {
	if o == nil || o.Qty == nil {
		var ret float64
		return ret
	}
	return *o.Qty
}

// GetQtyOk returns a tuple with the Qty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JournalData) GetQtyOk() (*float64, bool) {
	if o == nil || o.Qty == nil {
		return nil, false
	}
	return o.Qty, true
}

// HasQty returns a boolean if a field has been set.
func (o *JournalData) HasQty() bool {
	if o != nil && o.Qty != nil {
		return true
	}

	return false
}

// SetQty gets a reference to the given float64 and assigns it to the Qty field.
func (o *JournalData) SetQty(v float64) {
	o.Qty = &v
}

func (o JournalData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entry_type"] = o.EntryType
	}
	if true {
		toSerialize["from_account"] = o.FromAccount
	}
	if true {
		toSerialize["to_account"] = o.ToAccount
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Qty != nil {
		toSerialize["qty"] = o.Qty
	}
	return json.Marshal(toSerialize)
}

type NullableJournalData struct {
	value *JournalData
	isSet bool
}

func (v NullableJournalData) Get() *JournalData {
	return v.value
}

func (v *NullableJournalData) Set(val *JournalData) {
	v.value = val
	v.isSet = true
}

func (v NullableJournalData) IsSet() bool {
	return v.isSet
}

func (v *NullableJournalData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJournalData(val *JournalData) *NullableJournalData {
	return &NullableJournalData{value: val, isSet: true}
}

func (v NullableJournalData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJournalData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


