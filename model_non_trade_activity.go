/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NonTradeActivity struct for NonTradeActivity
type NonTradeActivity struct {
	Id *string `json:"id,omitempty"`
	AccountId *string `json:"account_id,omitempty"`
	ActivityType *ActivityType `json:"activity_type,omitempty"`
	Date *string `json:"date,omitempty"`
	NetAmount *string `json:"net_amount,omitempty"`
	Description *string `json:"description,omitempty"`
	Status *string `json:"status,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Qty *string `json:"qty,omitempty"`
	PerShareAmount *string `json:"per_share_amount,omitempty"`
}

// NewNonTradeActivity instantiates a new NonTradeActivity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNonTradeActivity() *NonTradeActivity {
	this := NonTradeActivity{}
	return &this
}

// NewNonTradeActivityWithDefaults instantiates a new NonTradeActivity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNonTradeActivityWithDefaults() *NonTradeActivity {
	this := NonTradeActivity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NonTradeActivity) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonTradeActivity) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NonTradeActivity) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NonTradeActivity) SetId(v string) {
	o.Id = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *NonTradeActivity) GetAccountId() string {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonTradeActivity) GetAccountIdOk() (*string, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *NonTradeActivity) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *NonTradeActivity) SetAccountId(v string) {
	o.AccountId = &v
}

// GetActivityType returns the ActivityType field value if set, zero value otherwise.
func (o *NonTradeActivity) GetActivityType() ActivityType {
	if o == nil || o.ActivityType == nil {
		var ret ActivityType
		return ret
	}
	return *o.ActivityType
}

// GetActivityTypeOk returns a tuple with the ActivityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonTradeActivity) GetActivityTypeOk() (*ActivityType, bool) {
	if o == nil || o.ActivityType == nil {
		return nil, false
	}
	return o.ActivityType, true
}

// HasActivityType returns a boolean if a field has been set.
func (o *NonTradeActivity) HasActivityType() bool {
	if o != nil && o.ActivityType != nil {
		return true
	}

	return false
}

// SetActivityType gets a reference to the given ActivityType and assigns it to the ActivityType field.
func (o *NonTradeActivity) SetActivityType(v ActivityType) {
	o.ActivityType = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *NonTradeActivity) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonTradeActivity) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *NonTradeActivity) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *NonTradeActivity) SetDate(v string) {
	o.Date = &v
}

// GetNetAmount returns the NetAmount field value if set, zero value otherwise.
func (o *NonTradeActivity) GetNetAmount() string {
	if o == nil || o.NetAmount == nil {
		var ret string
		return ret
	}
	return *o.NetAmount
}

// GetNetAmountOk returns a tuple with the NetAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonTradeActivity) GetNetAmountOk() (*string, bool) {
	if o == nil || o.NetAmount == nil {
		return nil, false
	}
	return o.NetAmount, true
}

// HasNetAmount returns a boolean if a field has been set.
func (o *NonTradeActivity) HasNetAmount() bool {
	if o != nil && o.NetAmount != nil {
		return true
	}

	return false
}

// SetNetAmount gets a reference to the given string and assigns it to the NetAmount field.
func (o *NonTradeActivity) SetNetAmount(v string) {
	o.NetAmount = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NonTradeActivity) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonTradeActivity) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NonTradeActivity) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NonTradeActivity) SetDescription(v string) {
	o.Description = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NonTradeActivity) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonTradeActivity) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NonTradeActivity) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *NonTradeActivity) SetStatus(v string) {
	o.Status = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *NonTradeActivity) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonTradeActivity) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *NonTradeActivity) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *NonTradeActivity) SetSymbol(v string) {
	o.Symbol = &v
}

// GetQty returns the Qty field value if set, zero value otherwise.
func (o *NonTradeActivity) GetQty() string {
	if o == nil || o.Qty == nil {
		var ret string
		return ret
	}
	return *o.Qty
}

// GetQtyOk returns a tuple with the Qty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonTradeActivity) GetQtyOk() (*string, bool) {
	if o == nil || o.Qty == nil {
		return nil, false
	}
	return o.Qty, true
}

// HasQty returns a boolean if a field has been set.
func (o *NonTradeActivity) HasQty() bool {
	if o != nil && o.Qty != nil {
		return true
	}

	return false
}

// SetQty gets a reference to the given string and assigns it to the Qty field.
func (o *NonTradeActivity) SetQty(v string) {
	o.Qty = &v
}

// GetPerShareAmount returns the PerShareAmount field value if set, zero value otherwise.
func (o *NonTradeActivity) GetPerShareAmount() string {
	if o == nil || o.PerShareAmount == nil {
		var ret string
		return ret
	}
	return *o.PerShareAmount
}

// GetPerShareAmountOk returns a tuple with the PerShareAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonTradeActivity) GetPerShareAmountOk() (*string, bool) {
	if o == nil || o.PerShareAmount == nil {
		return nil, false
	}
	return o.PerShareAmount, true
}

// HasPerShareAmount returns a boolean if a field has been set.
func (o *NonTradeActivity) HasPerShareAmount() bool {
	if o != nil && o.PerShareAmount != nil {
		return true
	}

	return false
}

// SetPerShareAmount gets a reference to the given string and assigns it to the PerShareAmount field.
func (o *NonTradeActivity) SetPerShareAmount(v string) {
	o.PerShareAmount = &v
}

func (o NonTradeActivity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.AccountId != nil {
		toSerialize["account_id"] = o.AccountId
	}
	if o.ActivityType != nil {
		toSerialize["activity_type"] = o.ActivityType
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.NetAmount != nil {
		toSerialize["net_amount"] = o.NetAmount
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Qty != nil {
		toSerialize["qty"] = o.Qty
	}
	if o.PerShareAmount != nil {
		toSerialize["per_share_amount"] = o.PerShareAmount
	}
	return json.Marshal(toSerialize)
}

type NullableNonTradeActivity struct {
	value *NonTradeActivity
	isSet bool
}

func (v NullableNonTradeActivity) Get() *NonTradeActivity {
	return v.value
}

func (v *NullableNonTradeActivity) Set(val *NonTradeActivity) {
	v.value = val
	v.isSet = true
}

func (v NullableNonTradeActivity) IsSet() bool {
	return v.isSet
}

func (v *NullableNonTradeActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNonTradeActivity(val *NonTradeActivity) *NullableNonTradeActivity {
	return &NullableNonTradeActivity{value: val, isSet: true}
}

func (v NullableNonTradeActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNonTradeActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


