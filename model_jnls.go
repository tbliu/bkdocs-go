/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// JNLS Journal information specific to securities transfers. This field is required for `Journal`s with an `entry_type` of `jnls` (securities transfers), but will be null for those with `jnlc` (cash transfers).
type JNLS struct {
	// Only valid for JNLS journals. Null for JNLC.
	Symbol string `json:"symbol"`
	// Only valid for JNLS journals. Null for JNLC.
	Qty float64 `json:"qty"`
	// Only valid for JNLS journals. Null for JNLC.
	Price float64 `json:"price"`
}

// NewJNLS instantiates a new JNLS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJNLS(symbol string, qty float64, price float64) *JNLS {
	this := JNLS{}
	this.Symbol = symbol
	this.Qty = qty
	this.Price = price
	return &this
}

// NewJNLSWithDefaults instantiates a new JNLS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJNLSWithDefaults() *JNLS {
	this := JNLS{}
	return &this
}

// GetSymbol returns the Symbol field value
func (o *JNLS) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *JNLS) GetSymbolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *JNLS) SetSymbol(v string) {
	o.Symbol = v
}

// GetQty returns the Qty field value
func (o *JNLS) GetQty() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Qty
}

// GetQtyOk returns a tuple with the Qty field value
// and a boolean to check if the value has been set.
func (o *JNLS) GetQtyOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Qty, true
}

// SetQty sets field value
func (o *JNLS) SetQty(v float64) {
	o.Qty = v
}

// GetPrice returns the Price field value
func (o *JNLS) GetPrice() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *JNLS) GetPriceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *JNLS) SetPrice(v float64) {
	o.Price = v
}

func (o JNLS) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	if true {
		toSerialize["qty"] = o.Qty
	}
	if true {
		toSerialize["price"] = o.Price
	}
	return json.Marshal(toSerialize)
}

type NullableJNLS struct {
	value *JNLS
	isSet bool
}

func (v NullableJNLS) Get() *JNLS {
	return v.value
}

func (v *NullableJNLS) Set(val *JNLS) {
	v.value = val
	v.isSet = true
}

func (v NullableJNLS) IsSet() bool {
	return v.isSet
}

func (v *NullableJNLS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJNLS(val *JNLS) *NullableJNLS {
	return &NullableJNLS{value: val, isSet: true}
}

func (v NullableJNLS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJNLS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


