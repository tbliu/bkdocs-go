/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Watchlist Represents a set of securities observed by a user.
type Watchlist struct {
	// Unique identifier of the watchlist itself. 
	Id *string `json:"id,omitempty"`
	// Unique identifier of the account that owns this watchlist. 
	AccountId *string `json:"account_id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	 *string `json:",omitempty"`
	Assets *[]Asset `json:"assets,omitempty"`
}

// NewWatchlist instantiates a new Watchlist object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWatchlist() *Watchlist {
	this := Watchlist{}
	return &this
}

// NewWatchlistWithDefaults instantiates a new Watchlist object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWatchlistWithDefaults() *Watchlist {
	this := Watchlist{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Watchlist) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Watchlist) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Watchlist) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Watchlist) SetId(v string) {
	o.Id = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *Watchlist) GetAccountId() string {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Watchlist) GetAccountIdOk() (*string, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *Watchlist) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *Watchlist) SetAccountId(v string) {
	o.AccountId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Watchlist) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Watchlist) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Watchlist) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Watchlist) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Watchlist) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Watchlist) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Watchlist) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Watchlist) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// Get returns the  field value if set, zero value otherwise.
func (o *Watchlist) Get() string {
	if o == nil || o. == nil {
		var ret string
		return ret
	}
	return *o.
}

// GetOk returns a tuple with the  field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Watchlist) GetOk() (*string, bool) {
	if o == nil || o. == nil {
		return nil, false
	}
	return o., true
}

// Has returns a boolean if a field has been set.
func (o *Watchlist) Has() bool {
	if o != nil && o. != nil {
		return true
	}

	return false
}

// Set gets a reference to the given string and assigns it to the  field.
func (o *Watchlist) Set(v string) {
	o. = &v
}

// GetAssets returns the Assets field value if set, zero value otherwise.
func (o *Watchlist) GetAssets() []Asset {
	if o == nil || o.Assets == nil {
		var ret []Asset
		return ret
	}
	return *o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Watchlist) GetAssetsOk() (*[]Asset, bool) {
	if o == nil || o.Assets == nil {
		return nil, false
	}
	return o.Assets, true
}

// HasAssets returns a boolean if a field has been set.
func (o *Watchlist) HasAssets() bool {
	if o != nil && o.Assets != nil {
		return true
	}

	return false
}

// SetAssets gets a reference to the given []Asset and assigns it to the Assets field.
func (o *Watchlist) SetAssets(v []Asset) {
	o.Assets = &v
}

func (o Watchlist) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.AccountId != nil {
		toSerialize["account_id"] = o.AccountId
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o. != nil {
		toSerialize[""] = o.
	}
	if o.Assets != nil {
		toSerialize["assets"] = o.Assets
	}
	return json.Marshal(toSerialize)
}

type NullableWatchlist struct {
	value *Watchlist
	isSet bool
}

func (v NullableWatchlist) Get() *Watchlist {
	return v.value
}

func (v *NullableWatchlist) Set(val *Watchlist) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchlist) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchlist) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchlist(val *Watchlist) *NullableWatchlist {
	return &NullableWatchlist{value: val, isSet: true}
}

func (v NullableWatchlist) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchlist) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


