/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DocumentUpload If an account has documents after the submission, it has the Document model in exchange with DocumentUpload. 
type DocumentUpload struct {
	DocumentType DocumentType `json:"document_type"`
	DocumentSubType *string `json:"document_sub_type,omitempty"`
	Content string `json:"content"`
	MimeType string `json:"mime_type"`
}

// NewDocumentUpload instantiates a new DocumentUpload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentUpload(documentType DocumentType, content string, mimeType string) *DocumentUpload {
	this := DocumentUpload{}
	this.DocumentType = documentType
	this.Content = content
	this.MimeType = mimeType
	return &this
}

// NewDocumentUploadWithDefaults instantiates a new DocumentUpload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentUploadWithDefaults() *DocumentUpload {
	this := DocumentUpload{}
	return &this
}

// GetDocumentType returns the DocumentType field value
func (o *DocumentUpload) GetDocumentType() DocumentType {
	if o == nil {
		var ret DocumentType
		return ret
	}

	return o.DocumentType
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value
// and a boolean to check if the value has been set.
func (o *DocumentUpload) GetDocumentTypeOk() (*DocumentType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DocumentType, true
}

// SetDocumentType sets field value
func (o *DocumentUpload) SetDocumentType(v DocumentType) {
	o.DocumentType = v
}

// GetDocumentSubType returns the DocumentSubType field value if set, zero value otherwise.
func (o *DocumentUpload) GetDocumentSubType() string {
	if o == nil || o.DocumentSubType == nil {
		var ret string
		return ret
	}
	return *o.DocumentSubType
}

// GetDocumentSubTypeOk returns a tuple with the DocumentSubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentUpload) GetDocumentSubTypeOk() (*string, bool) {
	if o == nil || o.DocumentSubType == nil {
		return nil, false
	}
	return o.DocumentSubType, true
}

// HasDocumentSubType returns a boolean if a field has been set.
func (o *DocumentUpload) HasDocumentSubType() bool {
	if o != nil && o.DocumentSubType != nil {
		return true
	}

	return false
}

// SetDocumentSubType gets a reference to the given string and assigns it to the DocumentSubType field.
func (o *DocumentUpload) SetDocumentSubType(v string) {
	o.DocumentSubType = &v
}

// GetContent returns the Content field value
func (o *DocumentUpload) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *DocumentUpload) GetContentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *DocumentUpload) SetContent(v string) {
	o.Content = v
}

// GetMimeType returns the MimeType field value
func (o *DocumentUpload) GetMimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *DocumentUpload) GetMimeTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *DocumentUpload) SetMimeType(v string) {
	o.MimeType = v
}

func (o DocumentUpload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["document_type"] = o.DocumentType
	}
	if o.DocumentSubType != nil {
		toSerialize["document_sub_type"] = o.DocumentSubType
	}
	if true {
		toSerialize["content"] = o.Content
	}
	if true {
		toSerialize["mime_type"] = o.MimeType
	}
	return json.Marshal(toSerialize)
}

type NullableDocumentUpload struct {
	value *DocumentUpload
	isSet bool
}

func (v NullableDocumentUpload) Get() *DocumentUpload {
	return v.value
}

func (v *NullableDocumentUpload) Set(val *DocumentUpload) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentUpload) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentUpload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentUpload(val *DocumentUpload) *NullableDocumentUpload {
	return &NullableDocumentUpload{value: val, isSet: true}
}

func (v NullableDocumentUpload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentUpload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


