/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KYCResult Hold information about the result of KYC.
type KYCResult struct {
	Reject *map[string]interface{} `json:"reject,omitempty"`
	Accept *map[string]interface{} `json:"accept,omitempty"`
	Indeterminate *map[string]interface{} `json:"indeterminate,omitempty"`
	AddidionalInformation *string `json:"addidional_information,omitempty"`
}

// NewKYCResult instantiates a new KYCResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKYCResult() *KYCResult {
	this := KYCResult{}
	return &this
}

// NewKYCResultWithDefaults instantiates a new KYCResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKYCResultWithDefaults() *KYCResult {
	this := KYCResult{}
	return &this
}

// GetReject returns the Reject field value if set, zero value otherwise.
func (o *KYCResult) GetReject() map[string]interface{} {
	if o == nil || o.Reject == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Reject
}

// GetRejectOk returns a tuple with the Reject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KYCResult) GetRejectOk() (*map[string]interface{}, bool) {
	if o == nil || o.Reject == nil {
		return nil, false
	}
	return o.Reject, true
}

// HasReject returns a boolean if a field has been set.
func (o *KYCResult) HasReject() bool {
	if o != nil && o.Reject != nil {
		return true
	}

	return false
}

// SetReject gets a reference to the given map[string]interface{} and assigns it to the Reject field.
func (o *KYCResult) SetReject(v map[string]interface{}) {
	o.Reject = &v
}

// GetAccept returns the Accept field value if set, zero value otherwise.
func (o *KYCResult) GetAccept() map[string]interface{} {
	if o == nil || o.Accept == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Accept
}

// GetAcceptOk returns a tuple with the Accept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KYCResult) GetAcceptOk() (*map[string]interface{}, bool) {
	if o == nil || o.Accept == nil {
		return nil, false
	}
	return o.Accept, true
}

// HasAccept returns a boolean if a field has been set.
func (o *KYCResult) HasAccept() bool {
	if o != nil && o.Accept != nil {
		return true
	}

	return false
}

// SetAccept gets a reference to the given map[string]interface{} and assigns it to the Accept field.
func (o *KYCResult) SetAccept(v map[string]interface{}) {
	o.Accept = &v
}

// GetIndeterminate returns the Indeterminate field value if set, zero value otherwise.
func (o *KYCResult) GetIndeterminate() map[string]interface{} {
	if o == nil || o.Indeterminate == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Indeterminate
}

// GetIndeterminateOk returns a tuple with the Indeterminate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KYCResult) GetIndeterminateOk() (*map[string]interface{}, bool) {
	if o == nil || o.Indeterminate == nil {
		return nil, false
	}
	return o.Indeterminate, true
}

// HasIndeterminate returns a boolean if a field has been set.
func (o *KYCResult) HasIndeterminate() bool {
	if o != nil && o.Indeterminate != nil {
		return true
	}

	return false
}

// SetIndeterminate gets a reference to the given map[string]interface{} and assigns it to the Indeterminate field.
func (o *KYCResult) SetIndeterminate(v map[string]interface{}) {
	o.Indeterminate = &v
}

// GetAddidionalInformation returns the AddidionalInformation field value if set, zero value otherwise.
func (o *KYCResult) GetAddidionalInformation() string {
	if o == nil || o.AddidionalInformation == nil {
		var ret string
		return ret
	}
	return *o.AddidionalInformation
}

// GetAddidionalInformationOk returns a tuple with the AddidionalInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KYCResult) GetAddidionalInformationOk() (*string, bool) {
	if o == nil || o.AddidionalInformation == nil {
		return nil, false
	}
	return o.AddidionalInformation, true
}

// HasAddidionalInformation returns a boolean if a field has been set.
func (o *KYCResult) HasAddidionalInformation() bool {
	if o != nil && o.AddidionalInformation != nil {
		return true
	}

	return false
}

// SetAddidionalInformation gets a reference to the given string and assigns it to the AddidionalInformation field.
func (o *KYCResult) SetAddidionalInformation(v string) {
	o.AddidionalInformation = &v
}

func (o KYCResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reject != nil {
		toSerialize["reject"] = o.Reject
	}
	if o.Accept != nil {
		toSerialize["accept"] = o.Accept
	}
	if o.Indeterminate != nil {
		toSerialize["indeterminate"] = o.Indeterminate
	}
	if o.AddidionalInformation != nil {
		toSerialize["addidional_information"] = o.AddidionalInformation
	}
	return json.Marshal(toSerialize)
}

type NullableKYCResult struct {
	value *KYCResult
	isSet bool
}

func (v NullableKYCResult) Get() *KYCResult {
	return v.value
}

func (v *NullableKYCResult) Set(val *KYCResult) {
	v.value = val
	v.isSet = true
}

func (v NullableKYCResult) IsSet() bool {
	return v.isSet
}

func (v *NullableKYCResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKYCResult(val *KYCResult) *NullableKYCResult {
	return &NullableKYCResult{value: val, isSet: true}
}

func (v NullableKYCResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKYCResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


