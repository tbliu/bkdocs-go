/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// JournalAllOf struct for JournalAllOf
type JournalAllOf struct {
	// journal ID
	Id string `json:"id"`
	// JNLS, for transfers of securities, or JNLC, for transfers of cash.
	EntryType string `json:"entry_type"`
	// account ID the shares go from
	FromAccount string `json:"from_account"`
	// account ID the shares go to
	ToAccount string `json:"to_account"`
	SettleDate string `json:"settle_date"`
	Status *string `json:"status,omitempty"`
}

// NewJournalAllOf instantiates a new JournalAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJournalAllOf(id string, entryType string, fromAccount string, toAccount string, settleDate string) *JournalAllOf {
	this := JournalAllOf{}
	this.Id = id
	this.EntryType = entryType
	this.FromAccount = fromAccount
	this.ToAccount = toAccount
	this.SettleDate = settleDate
	return &this
}

// NewJournalAllOfWithDefaults instantiates a new JournalAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJournalAllOfWithDefaults() *JournalAllOf {
	this := JournalAllOf{}
	return &this
}

// GetId returns the Id field value
func (o *JournalAllOf) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *JournalAllOf) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *JournalAllOf) SetId(v string) {
	o.Id = v
}

// GetEntryType returns the EntryType field value
func (o *JournalAllOf) GetEntryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntryType
}

// GetEntryTypeOk returns a tuple with the EntryType field value
// and a boolean to check if the value has been set.
func (o *JournalAllOf) GetEntryTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EntryType, true
}

// SetEntryType sets field value
func (o *JournalAllOf) SetEntryType(v string) {
	o.EntryType = v
}

// GetFromAccount returns the FromAccount field value
func (o *JournalAllOf) GetFromAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromAccount
}

// GetFromAccountOk returns a tuple with the FromAccount field value
// and a boolean to check if the value has been set.
func (o *JournalAllOf) GetFromAccountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FromAccount, true
}

// SetFromAccount sets field value
func (o *JournalAllOf) SetFromAccount(v string) {
	o.FromAccount = v
}

// GetToAccount returns the ToAccount field value
func (o *JournalAllOf) GetToAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToAccount
}

// GetToAccountOk returns a tuple with the ToAccount field value
// and a boolean to check if the value has been set.
func (o *JournalAllOf) GetToAccountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ToAccount, true
}

// SetToAccount sets field value
func (o *JournalAllOf) SetToAccount(v string) {
	o.ToAccount = v
}

// GetSettleDate returns the SettleDate field value
func (o *JournalAllOf) GetSettleDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SettleDate
}

// GetSettleDateOk returns a tuple with the SettleDate field value
// and a boolean to check if the value has been set.
func (o *JournalAllOf) GetSettleDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SettleDate, true
}

// SetSettleDate sets field value
func (o *JournalAllOf) SetSettleDate(v string) {
	o.SettleDate = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *JournalAllOf) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JournalAllOf) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *JournalAllOf) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *JournalAllOf) SetStatus(v string) {
	o.Status = &v
}

func (o JournalAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["entry_type"] = o.EntryType
	}
	if true {
		toSerialize["from_account"] = o.FromAccount
	}
	if true {
		toSerialize["to_account"] = o.ToAccount
	}
	if true {
		toSerialize["settle_date"] = o.SettleDate
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableJournalAllOf struct {
	value *JournalAllOf
	isSet bool
}

func (v NullableJournalAllOf) Get() *JournalAllOf {
	return v.value
}

func (v *NullableJournalAllOf) Set(val *JournalAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableJournalAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableJournalAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJournalAllOf(val *JournalAllOf) *NullableJournalAllOf {
	return &NullableJournalAllOf{value: val, isSet: true}
}

func (v NullableJournalAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJournalAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


