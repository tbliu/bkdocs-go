/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DocumentType - identity_verification:   identity verification document - address_verification:   address verification document - date_of_birth_verification:   date of birth verification document - tax_id_verification:   tax ID verification document - account_approval_letter:   407 approval letter - cip_result:   initial CIP result 
type DocumentType string

// List of DocumentType
const (
	IDENTITY_VERIFICATION DocumentType = "identity_verification"
	ADDRESS_VERIFICATION DocumentType = "address_verification"
	DATE_OF_BIRTH_VERIFICATION DocumentType = "date_of_birth_verification"
	TAX_ID_VERIFICATION DocumentType = "tax_id_verification"
	ACCOUNT_APPROVAL_LETTER DocumentType = "account_approval_letter"
	CIP_RESULT DocumentType = "cip_result"
)

var allowedDocumentTypeEnumValues = []DocumentType{
	"identity_verification",
	"address_verification",
	"date_of_birth_verification",
	"tax_id_verification",
	"account_approval_letter",
	"cip_result",
}

func (v *DocumentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DocumentType(value)
	for _, existing := range allowedDocumentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DocumentType", value)
}

// NewDocumentTypeFromValue returns a pointer to a valid DocumentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDocumentTypeFromValue(v string) (*DocumentType, error) {
	ev := DocumentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DocumentType: valid values are %v", v, allowedDocumentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DocumentType) IsValid() bool {
	for _, existing := range allowedDocumentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DocumentType value
func (v DocumentType) Ptr() *DocumentType {
	return &v
}

type NullableDocumentType struct {
	value *DocumentType
	isSet bool
}

func (v NullableDocumentType) Get() *DocumentType {
	return v.value
}

func (v *NullableDocumentType) Set(val *DocumentType) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentType) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentType(val *DocumentType) *NullableDocumentType {
	return &NullableDocumentType{value: val, isSet: true}
}

func (v NullableDocumentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

