/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// InlineResponse2004 struct for InlineResponse2004
type InlineResponse2004 struct {
	EventId *int32 `json:"event_id,omitempty"`
	At *time.Time `json:"at,omitempty"`
	JournalId *string `json:"journal_id,omitempty"`
	StatusFrom *string `json:"status_from,omitempty"`
	StatusTo *string `json:"status_to,omitempty"`
}

// NewInlineResponse2004 instantiates a new InlineResponse2004 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2004() *InlineResponse2004 {
	this := InlineResponse2004{}
	return &this
}

// NewInlineResponse2004WithDefaults instantiates a new InlineResponse2004 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2004WithDefaults() *InlineResponse2004 {
	this := InlineResponse2004{}
	return &this
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *InlineResponse2004) GetEventId() int32 {
	if o == nil || o.EventId == nil {
		var ret int32
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetEventIdOk() (*int32, bool) {
	if o == nil || o.EventId == nil {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *InlineResponse2004) HasEventId() bool {
	if o != nil && o.EventId != nil {
		return true
	}

	return false
}

// SetEventId gets a reference to the given int32 and assigns it to the EventId field.
func (o *InlineResponse2004) SetEventId(v int32) {
	o.EventId = &v
}

// GetAt returns the At field value if set, zero value otherwise.
func (o *InlineResponse2004) GetAt() time.Time {
	if o == nil || o.At == nil {
		var ret time.Time
		return ret
	}
	return *o.At
}

// GetAtOk returns a tuple with the At field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetAtOk() (*time.Time, bool) {
	if o == nil || o.At == nil {
		return nil, false
	}
	return o.At, true
}

// HasAt returns a boolean if a field has been set.
func (o *InlineResponse2004) HasAt() bool {
	if o != nil && o.At != nil {
		return true
	}

	return false
}

// SetAt gets a reference to the given time.Time and assigns it to the At field.
func (o *InlineResponse2004) SetAt(v time.Time) {
	o.At = &v
}

// GetJournalId returns the JournalId field value if set, zero value otherwise.
func (o *InlineResponse2004) GetJournalId() string {
	if o == nil || o.JournalId == nil {
		var ret string
		return ret
	}
	return *o.JournalId
}

// GetJournalIdOk returns a tuple with the JournalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetJournalIdOk() (*string, bool) {
	if o == nil || o.JournalId == nil {
		return nil, false
	}
	return o.JournalId, true
}

// HasJournalId returns a boolean if a field has been set.
func (o *InlineResponse2004) HasJournalId() bool {
	if o != nil && o.JournalId != nil {
		return true
	}

	return false
}

// SetJournalId gets a reference to the given string and assigns it to the JournalId field.
func (o *InlineResponse2004) SetJournalId(v string) {
	o.JournalId = &v
}

// GetStatusFrom returns the StatusFrom field value if set, zero value otherwise.
func (o *InlineResponse2004) GetStatusFrom() string {
	if o == nil || o.StatusFrom == nil {
		var ret string
		return ret
	}
	return *o.StatusFrom
}

// GetStatusFromOk returns a tuple with the StatusFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetStatusFromOk() (*string, bool) {
	if o == nil || o.StatusFrom == nil {
		return nil, false
	}
	return o.StatusFrom, true
}

// HasStatusFrom returns a boolean if a field has been set.
func (o *InlineResponse2004) HasStatusFrom() bool {
	if o != nil && o.StatusFrom != nil {
		return true
	}

	return false
}

// SetStatusFrom gets a reference to the given string and assigns it to the StatusFrom field.
func (o *InlineResponse2004) SetStatusFrom(v string) {
	o.StatusFrom = &v
}

// GetStatusTo returns the StatusTo field value if set, zero value otherwise.
func (o *InlineResponse2004) GetStatusTo() string {
	if o == nil || o.StatusTo == nil {
		var ret string
		return ret
	}
	return *o.StatusTo
}

// GetStatusToOk returns a tuple with the StatusTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetStatusToOk() (*string, bool) {
	if o == nil || o.StatusTo == nil {
		return nil, false
	}
	return o.StatusTo, true
}

// HasStatusTo returns a boolean if a field has been set.
func (o *InlineResponse2004) HasStatusTo() bool {
	if o != nil && o.StatusTo != nil {
		return true
	}

	return false
}

// SetStatusTo gets a reference to the given string and assigns it to the StatusTo field.
func (o *InlineResponse2004) SetStatusTo(v string) {
	o.StatusTo = &v
}

func (o InlineResponse2004) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventId != nil {
		toSerialize["event_id"] = o.EventId
	}
	if o.At != nil {
		toSerialize["at"] = o.At
	}
	if o.JournalId != nil {
		toSerialize["journal_id"] = o.JournalId
	}
	if o.StatusFrom != nil {
		toSerialize["status_from"] = o.StatusFrom
	}
	if o.StatusTo != nil {
		toSerialize["status_to"] = o.StatusTo
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2004 struct {
	value *InlineResponse2004
	isSet bool
}

func (v NullableInlineResponse2004) Get() *InlineResponse2004 {
	return v.value
}

func (v *NullableInlineResponse2004) Set(val *InlineResponse2004) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2004) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2004) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2004(val *InlineResponse2004) *NullableInlineResponse2004 {
	return &NullableInlineResponse2004{value: val, isSet: true}
}

func (v NullableInlineResponse2004) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2004) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


