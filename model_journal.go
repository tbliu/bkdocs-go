/*
Alpaca Broker API

Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Journal Represents a cash or security transfer between accounts, as specified by the `entry_type` parameter.
type Journal struct {
	// journal ID
	Id string `json:"id"`
	// JNLS, for transfers of securities, or JNLC, for transfers of cash.
	EntryType string `json:"entry_type"`
	// account ID the shares go from
	FromAccount string `json:"from_account"`
	// account ID the shares go to
	ToAccount string `json:"to_account"`
	SettleDate string `json:"settle_date"`
	Status *string `json:"status,omitempty"`
	// Only valid for JNLS journals. Null for JNLC.
	Symbol string `json:"symbol"`
	// Only valid for JNLS journals. Null for JNLC.
	Qty float64 `json:"qty"`
	// Only valid for JNLS journals. Null for JNLC.
	Price float64 `json:"price"`
	// ID the amount goes to. Only valid for JNLC journals. Null for JNLS.
	Description *string `json:"description,omitempty"`
	// Only valid for JNLC journals. Null for JNLS.
	NetAmount float64 `json:"net_amount"`
	// Only valid for JNLC journals. Null for JNLS. Max 255 characters.
	TransmitterName *string `json:"transmitter_name,omitempty"`
	// Only valid for JNLC journals. Null for JNLS.max 255 characters
	TransmitterAccountNumber *string `json:"transmitter_account_number,omitempty"`
	// Only valid for JNLC journals. Null for JNLS.max 255 characters
	TransmitterAddress *string `json:"transmitter_address,omitempty"`
	// Only valid for JNLC journals. Null for JNLS.max 255 characters
	TransmitterFinancialInstitution *string `json:"transmitter_financial_institution,omitempty"`
	// Only valid for JNLC journals. Null for JNLS.
	TransmitterTimestamp *time.Time `json:"transmitter_timestamp,omitempty"`
}

// NewJournal instantiates a new Journal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJournal(id string, entryType string, fromAccount string, toAccount string, settleDate string, symbol string, qty float64, price float64, netAmount float64) *Journal {
	this := Journal{}
	this.Id = id
	this.EntryType = entryType
	this.FromAccount = fromAccount
	this.ToAccount = toAccount
	this.SettleDate = settleDate
	this.Symbol = symbol
	this.Qty = qty
	this.Price = price
	this.NetAmount = netAmount
	return &this
}

// NewJournalWithDefaults instantiates a new Journal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJournalWithDefaults() *Journal {
	this := Journal{}
	return &this
}

// GetId returns the Id field value
func (o *Journal) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Journal) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Journal) SetId(v string) {
	o.Id = v
}

// GetEntryType returns the EntryType field value
func (o *Journal) GetEntryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntryType
}

// GetEntryTypeOk returns a tuple with the EntryType field value
// and a boolean to check if the value has been set.
func (o *Journal) GetEntryTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EntryType, true
}

// SetEntryType sets field value
func (o *Journal) SetEntryType(v string) {
	o.EntryType = v
}

// GetFromAccount returns the FromAccount field value
func (o *Journal) GetFromAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromAccount
}

// GetFromAccountOk returns a tuple with the FromAccount field value
// and a boolean to check if the value has been set.
func (o *Journal) GetFromAccountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FromAccount, true
}

// SetFromAccount sets field value
func (o *Journal) SetFromAccount(v string) {
	o.FromAccount = v
}

// GetToAccount returns the ToAccount field value
func (o *Journal) GetToAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToAccount
}

// GetToAccountOk returns a tuple with the ToAccount field value
// and a boolean to check if the value has been set.
func (o *Journal) GetToAccountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ToAccount, true
}

// SetToAccount sets field value
func (o *Journal) SetToAccount(v string) {
	o.ToAccount = v
}

// GetSettleDate returns the SettleDate field value
func (o *Journal) GetSettleDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SettleDate
}

// GetSettleDateOk returns a tuple with the SettleDate field value
// and a boolean to check if the value has been set.
func (o *Journal) GetSettleDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SettleDate, true
}

// SetSettleDate sets field value
func (o *Journal) SetSettleDate(v string) {
	o.SettleDate = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Journal) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Journal) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Journal) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Journal) SetStatus(v string) {
	o.Status = &v
}

// GetSymbol returns the Symbol field value
func (o *Journal) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *Journal) GetSymbolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *Journal) SetSymbol(v string) {
	o.Symbol = v
}

// GetQty returns the Qty field value
func (o *Journal) GetQty() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Qty
}

// GetQtyOk returns a tuple with the Qty field value
// and a boolean to check if the value has been set.
func (o *Journal) GetQtyOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Qty, true
}

// SetQty sets field value
func (o *Journal) SetQty(v float64) {
	o.Qty = v
}

// GetPrice returns the Price field value
func (o *Journal) GetPrice() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *Journal) GetPriceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *Journal) SetPrice(v float64) {
	o.Price = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Journal) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Journal) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Journal) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Journal) SetDescription(v string) {
	o.Description = &v
}

// GetNetAmount returns the NetAmount field value
func (o *Journal) GetNetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.NetAmount
}

// GetNetAmountOk returns a tuple with the NetAmount field value
// and a boolean to check if the value has been set.
func (o *Journal) GetNetAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NetAmount, true
}

// SetNetAmount sets field value
func (o *Journal) SetNetAmount(v float64) {
	o.NetAmount = v
}

// GetTransmitterName returns the TransmitterName field value if set, zero value otherwise.
func (o *Journal) GetTransmitterName() string {
	if o == nil || o.TransmitterName == nil {
		var ret string
		return ret
	}
	return *o.TransmitterName
}

// GetTransmitterNameOk returns a tuple with the TransmitterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Journal) GetTransmitterNameOk() (*string, bool) {
	if o == nil || o.TransmitterName == nil {
		return nil, false
	}
	return o.TransmitterName, true
}

// HasTransmitterName returns a boolean if a field has been set.
func (o *Journal) HasTransmitterName() bool {
	if o != nil && o.TransmitterName != nil {
		return true
	}

	return false
}

// SetTransmitterName gets a reference to the given string and assigns it to the TransmitterName field.
func (o *Journal) SetTransmitterName(v string) {
	o.TransmitterName = &v
}

// GetTransmitterAccountNumber returns the TransmitterAccountNumber field value if set, zero value otherwise.
func (o *Journal) GetTransmitterAccountNumber() string {
	if o == nil || o.TransmitterAccountNumber == nil {
		var ret string
		return ret
	}
	return *o.TransmitterAccountNumber
}

// GetTransmitterAccountNumberOk returns a tuple with the TransmitterAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Journal) GetTransmitterAccountNumberOk() (*string, bool) {
	if o == nil || o.TransmitterAccountNumber == nil {
		return nil, false
	}
	return o.TransmitterAccountNumber, true
}

// HasTransmitterAccountNumber returns a boolean if a field has been set.
func (o *Journal) HasTransmitterAccountNumber() bool {
	if o != nil && o.TransmitterAccountNumber != nil {
		return true
	}

	return false
}

// SetTransmitterAccountNumber gets a reference to the given string and assigns it to the TransmitterAccountNumber field.
func (o *Journal) SetTransmitterAccountNumber(v string) {
	o.TransmitterAccountNumber = &v
}

// GetTransmitterAddress returns the TransmitterAddress field value if set, zero value otherwise.
func (o *Journal) GetTransmitterAddress() string {
	if o == nil || o.TransmitterAddress == nil {
		var ret string
		return ret
	}
	return *o.TransmitterAddress
}

// GetTransmitterAddressOk returns a tuple with the TransmitterAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Journal) GetTransmitterAddressOk() (*string, bool) {
	if o == nil || o.TransmitterAddress == nil {
		return nil, false
	}
	return o.TransmitterAddress, true
}

// HasTransmitterAddress returns a boolean if a field has been set.
func (o *Journal) HasTransmitterAddress() bool {
	if o != nil && o.TransmitterAddress != nil {
		return true
	}

	return false
}

// SetTransmitterAddress gets a reference to the given string and assigns it to the TransmitterAddress field.
func (o *Journal) SetTransmitterAddress(v string) {
	o.TransmitterAddress = &v
}

// GetTransmitterFinancialInstitution returns the TransmitterFinancialInstitution field value if set, zero value otherwise.
func (o *Journal) GetTransmitterFinancialInstitution() string {
	if o == nil || o.TransmitterFinancialInstitution == nil {
		var ret string
		return ret
	}
	return *o.TransmitterFinancialInstitution
}

// GetTransmitterFinancialInstitutionOk returns a tuple with the TransmitterFinancialInstitution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Journal) GetTransmitterFinancialInstitutionOk() (*string, bool) {
	if o == nil || o.TransmitterFinancialInstitution == nil {
		return nil, false
	}
	return o.TransmitterFinancialInstitution, true
}

// HasTransmitterFinancialInstitution returns a boolean if a field has been set.
func (o *Journal) HasTransmitterFinancialInstitution() bool {
	if o != nil && o.TransmitterFinancialInstitution != nil {
		return true
	}

	return false
}

// SetTransmitterFinancialInstitution gets a reference to the given string and assigns it to the TransmitterFinancialInstitution field.
func (o *Journal) SetTransmitterFinancialInstitution(v string) {
	o.TransmitterFinancialInstitution = &v
}

// GetTransmitterTimestamp returns the TransmitterTimestamp field value if set, zero value otherwise.
func (o *Journal) GetTransmitterTimestamp() time.Time {
	if o == nil || o.TransmitterTimestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.TransmitterTimestamp
}

// GetTransmitterTimestampOk returns a tuple with the TransmitterTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Journal) GetTransmitterTimestampOk() (*time.Time, bool) {
	if o == nil || o.TransmitterTimestamp == nil {
		return nil, false
	}
	return o.TransmitterTimestamp, true
}

// HasTransmitterTimestamp returns a boolean if a field has been set.
func (o *Journal) HasTransmitterTimestamp() bool {
	if o != nil && o.TransmitterTimestamp != nil {
		return true
	}

	return false
}

// SetTransmitterTimestamp gets a reference to the given time.Time and assigns it to the TransmitterTimestamp field.
func (o *Journal) SetTransmitterTimestamp(v time.Time) {
	o.TransmitterTimestamp = &v
}

func (o Journal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["entry_type"] = o.EntryType
	}
	if true {
		toSerialize["from_account"] = o.FromAccount
	}
	if true {
		toSerialize["to_account"] = o.ToAccount
	}
	if true {
		toSerialize["settle_date"] = o.SettleDate
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	if true {
		toSerialize["qty"] = o.Qty
	}
	if true {
		toSerialize["price"] = o.Price
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["net_amount"] = o.NetAmount
	}
	if o.TransmitterName != nil {
		toSerialize["transmitter_name"] = o.TransmitterName
	}
	if o.TransmitterAccountNumber != nil {
		toSerialize["transmitter_account_number"] = o.TransmitterAccountNumber
	}
	if o.TransmitterAddress != nil {
		toSerialize["transmitter_address"] = o.TransmitterAddress
	}
	if o.TransmitterFinancialInstitution != nil {
		toSerialize["transmitter_financial_institution"] = o.TransmitterFinancialInstitution
	}
	if o.TransmitterTimestamp != nil {
		toSerialize["transmitter_timestamp"] = o.TransmitterTimestamp
	}
	return json.Marshal(toSerialize)
}

type NullableJournal struct {
	value *Journal
	isSet bool
}

func (v NullableJournal) Get() *Journal {
	return v.value
}

func (v *NullableJournal) Set(val *Journal) {
	v.value = val
	v.isSet = true
}

func (v NullableJournal) IsSet() bool {
	return v.isSet
}

func (v *NullableJournal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJournal(val *Journal) *NullableJournal {
	return &NullableJournal{value: val, isSet: true}
}

func (v NullableJournal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJournal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


